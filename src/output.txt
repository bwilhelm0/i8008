
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.25+97 (git sha1 221036c5b, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Running command `read_verilog -sv debugbus.sv i8008_core.sv; synth_ice40 -json build/synthesis.json -top top' --

1. Executing Verilog-2005 frontend: debugbus.sv
Parsing SystemVerilog input from `debugbus.sv' to AST representation.
Warning: Encountered `parallel_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `parallel_case' attribute or the SystemVerilog `unique' or `priority' keywords is recommended!
Generating RTLIL representation for module `\debug_harness'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: i8008_core.sv
Parsing SystemVerilog input from `i8008_core.sv' to AST representation.
Generating RTLIL representation for module `\top'.
Generating RTLIL representation for module `\i8008_core'.
Generating RTLIL representation for module `\ALU'.
Generating RTLIL representation for module `\fsm_decoder'.
Generating RTLIL representation for module `\reg_file'.
Generating RTLIL representation for module `\stack'.
Generating RTLIL representation for module `\Register'.
Generating RTLIL representation for module `\FlagRegister'.
Generating RTLIL representation for module `\Counter'.
Successfully finished Verilog frontend.

3. Executing SYNTH_ICE40 pass.

3.1. Executing Verilog-2005 frontend: /Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

3.2. Executing HIERARCHY pass (managing design hierarchy).

3.2.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \i8008_core
Used module:         \fsm_decoder
Used module:         \stack
Used module:         \Counter
Used module:         \reg_file
Used module:         \ALU
Used module:             \FlagRegister
Used module:         \Register
Parameter \WIDTH = 8
Parameter \STACK_HEIGHT = 8

3.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\i8008_core'.
Parameter \WIDTH = 8
Parameter \STACK_HEIGHT = 8
Generating RTLIL representation for module `$paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core'.
Parameter \WIDTH = 14
Parameter \HEIGHT = 8

3.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\stack'.
Parameter \WIDTH = 14
Parameter \HEIGHT = 8
Generating RTLIL representation for module `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack'.
Parameter \WIDTH = 3

3.2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\Counter'.
Parameter \WIDTH = 3
Generating RTLIL representation for module `$paramod\Counter\WIDTH=s32'00000000000000000000000000000011'.
Parameter \WIDTH = 8
Parameter \HEIGHT = 7

3.2.5. Executing AST frontend in derive mode using pre-parsed AST for module `\reg_file'.
Parameter \WIDTH = 8
Parameter \HEIGHT = 7
Generating RTLIL representation for module `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file'.
Parameter \WIDTH = 8

3.2.6. Executing AST frontend in derive mode using pre-parsed AST for module `\Register'.
Parameter \WIDTH = 8
Generating RTLIL representation for module `$paramod\Register\WIDTH=s32'00000000000000000000000000001000'.
Parameter \WIDTH = 8
Found cached RTLIL representation for module `$paramod\Register\WIDTH=s32'00000000000000000000000000001000'.
Parameter \WIDTH = 4

3.2.7. Executing AST frontend in derive mode using pre-parsed AST for module `\FlagRegister'.
Parameter \WIDTH = 4
Generating RTLIL representation for module `$paramod\FlagRegister\WIDTH=s32'00000000000000000000000000000100'.

3.2.8. Analyzing design hierarchy..
Top module:  \top
Used module:     $paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core
Used module:         \fsm_decoder
Used module:         \stack
Used module:         \Counter
Used module:         \reg_file
Used module:         \ALU
Used module:             $paramod\FlagRegister\WIDTH=s32'00000000000000000000000000000100
Used module:         \Register
Parameter \WIDTH = 14
Parameter \HEIGHT = 8
Found cached RTLIL representation for module `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack'.
Parameter \WIDTH = 3
Found cached RTLIL representation for module `$paramod\Counter\WIDTH=s32'00000000000000000000000000000011'.
Parameter \WIDTH = 8
Parameter \HEIGHT = 7
Found cached RTLIL representation for module `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file'.
Parameter \WIDTH = 8
Found cached RTLIL representation for module `$paramod\Register\WIDTH=s32'00000000000000000000000000001000'.
Parameter \WIDTH = 8
Found cached RTLIL representation for module `$paramod\Register\WIDTH=s32'00000000000000000000000000001000'.

3.2.9. Analyzing design hierarchy..
Top module:  \top
Used module:     $paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core
Used module:         \fsm_decoder
Used module:         $paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack
Used module:         $paramod\Counter\WIDTH=s32'00000000000000000000000000000011
Used module:         $paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file
Used module:         \ALU
Used module:             $paramod\FlagRegister\WIDTH=s32'00000000000000000000000000000100
Used module:         $paramod\Register\WIDTH=s32'00000000000000000000000000001000

3.2.10. Analyzing design hierarchy..
Top module:  \top
Used module:     $paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core
Used module:         \fsm_decoder
Used module:         $paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack
Used module:         $paramod\Counter\WIDTH=s32'00000000000000000000000000000011
Used module:         $paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file
Used module:         \ALU
Used module:             $paramod\FlagRegister\WIDTH=s32'00000000000000000000000000000100
Used module:         $paramod\Register\WIDTH=s32'00000000000000000000000000001000
Removing unused module `\Counter'.
Removing unused module `\FlagRegister'.
Removing unused module `\Register'.
Removing unused module `\stack'.
Removing unused module `\reg_file'.
Removing unused module `\i8008_core'.
Removing unused module `\debug_harness'.
Removed 7 unused modules.

3.3. Executing PROC pass (convert processes to netlists).

3.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1414$1416 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1353$1409 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1273$1405 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1212$1398 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1138$1395 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1088$1392 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1017$1389 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:967$1386 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:803$1378 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:742$1371 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:662$1367 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:601$1360 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:527$1357 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:477$1354 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:406$1351 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:356$1348 in module SB_DFFSR.
Marked 1 switch rules as full_case in process $proc$i8008_core.sv:824$1696 in module $paramod\FlagRegister\WIDTH=s32'00000000000000000000000000000100.
Marked 1 switch rules as full_case in process $proc$i8008_core.sv:810$1695 in module $paramod\Register\WIDTH=s32'00000000000000000000000000001000.
Marked 2 switch rules as full_case in process $proc$i8008_core.sv:737$1669 in module $paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.
Marked 3 switch rules as full_case in process $proc$i8008_core.sv:838$1655 in module $paramod\Counter\WIDTH=s32'00000000000000000000000000000011.
Marked 4 switch rules as full_case in process $proc$i8008_core.sv:779$1589 in module $paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.
Marked 1 switch rules as full_case in process $proc$i8008_core.sv:709$1054 in module fsm_decoder.
Removed 4 dead cases from process $proc$i8008_core.sv:0$998 in module fsm_decoder.
Marked 8 switch rules as full_case in process $proc$i8008_core.sv:0$998 in module fsm_decoder.
Removed 1 dead cases from process $proc$i8008_core.sv:0$994 in module fsm_decoder.
Removed 1 dead cases from process $proc$i8008_core.sv:0$966 in module ALU.
Marked 1 switch rules as full_case in process $proc$i8008_core.sv:0$966 in module ALU.
Marked 1 switch rules as full_case in process $proc$i8008_core.sv:157$1563 in module $paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core.
Marked 7 switch rules as full_case in process $proc$i8008_core.sv:0$1559 in module $paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core.
Marked 1 switch rules as full_case in process $proc$i8008_core.sv:94$1556 in module $paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core.
Removed a total of 6 dead cases.

3.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 11 redundant assignments.
Promoted 69 assignments to connections.

3.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1419'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1415'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1408'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1404'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1397'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1394'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1391'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1388'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1385'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1383'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1381'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1377'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1370'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1366'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1359'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1356'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1353'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1350'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1347'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1345'.
  Set init value: \Q = 1'0

3.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1414$1416'.
Found async reset \R in `\SB_DFFNER.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1273$1405'.
Found async reset \S in `\SB_DFFNS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1138$1395'.
Found async reset \R in `\SB_DFFNR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1017$1389'.
Found async reset \S in `\SB_DFFES.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:803$1378'.
Found async reset \R in `\SB_DFFER.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:662$1367'.
Found async reset \S in `\SB_DFFS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:527$1357'.
Found async reset \R in `\SB_DFFR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:406$1351'.
Found VHDL-style edge-trigger \Ready in `$paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core.$proc$i8008_core.sv:157$1563'.

3.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~71 debug messages>

3.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1419'.
Creating decoders for process `\SB_DFFNES.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1414$1416'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1415'.
Creating decoders for process `\SB_DFFNESS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1353$1409'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1408'.
Creating decoders for process `\SB_DFFNER.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1273$1405'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1404'.
Creating decoders for process `\SB_DFFNESR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1212$1398'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1397'.
Creating decoders for process `\SB_DFFNS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1138$1395'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1394'.
Creating decoders for process `\SB_DFFNSS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1088$1392'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1391'.
Creating decoders for process `\SB_DFFNR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1017$1389'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1388'.
Creating decoders for process `\SB_DFFNSR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:967$1386'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1385'.
Creating decoders for process `\SB_DFFNE.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:922$1384'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1383'.
Creating decoders for process `\SB_DFFN.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:882$1382'.
Creating decoders for process `\SB_DFFES.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1381'.
Creating decoders for process `\SB_DFFES.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:803$1378'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1377'.
Creating decoders for process `\SB_DFFESS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:742$1371'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1370'.
Creating decoders for process `\SB_DFFER.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:662$1367'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1366'.
Creating decoders for process `\SB_DFFESR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:601$1360'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1359'.
Creating decoders for process `\SB_DFFS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:527$1357'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1356'.
Creating decoders for process `\SB_DFFSS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:477$1354'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1353'.
Creating decoders for process `\SB_DFFR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:406$1351'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1350'.
Creating decoders for process `\SB_DFFSR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:356$1348'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1347'.
Creating decoders for process `\SB_DFFE.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:311$1346'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1345'.
Creating decoders for process `\SB_DFF.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:271$1344'.
Creating decoders for process `$paramod\FlagRegister\WIDTH=s32'00000000000000000000000000000100.$proc$i8008_core.sv:824$1696'.
     1/1: $0\Q[3:0]
Creating decoders for process `$paramod\Register\WIDTH=s32'00000000000000000000000000001000.$proc$i8008_core.sv:810$1695'.
     1/1: $0\Q[7:0]
Creating decoders for process `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$proc$i8008_core.sv:0$1693'.
Creating decoders for process `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$proc$i8008_core.sv:737$1669'.
     1/13: $2$memwr$\rf$i8008_core.sv:748$1668_EN[7:0]$1692
     2/13: $2$memwr$\rf$i8008_core.sv:748$1668_DATA[7:0]$1691
     3/13: $2$memwr$\rf$i8008_core.sv:748$1668_ADDR[2:0]$1690
     4/13: $1$memwr$\rf$i8008_core.sv:745$1667_EN[7:0]$1686
     5/13: $1$memwr$\rf$i8008_core.sv:744$1666_EN[7:0]$1685
     6/13: $1$memwr$\rf$i8008_core.sv:743$1665_EN[7:0]$1684
     7/13: $1$memwr$\rf$i8008_core.sv:742$1664_EN[7:0]$1683
     8/13: $1$memwr$\rf$i8008_core.sv:741$1663_EN[7:0]$1682
     9/13: $1$memwr$\rf$i8008_core.sv:740$1662_EN[7:0]$1681
    10/13: $1$memwr$\rf$i8008_core.sv:739$1661_EN[7:0]$1680
    11/13: $1$memwr$\rf$i8008_core.sv:748$1668_EN[7:0]$1689
    12/13: $1$memwr$\rf$i8008_core.sv:748$1668_DATA[7:0]$1688
    13/13: $1$memwr$\rf$i8008_core.sv:748$1668_ADDR[2:0]$1687
Creating decoders for process `$paramod\Counter\WIDTH=s32'00000000000000000000000000000011.$proc$i8008_core.sv:838$1655'.
     1/1: $0\Q[2:0]
Creating decoders for process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:0$1653'.
Creating decoders for process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
     1/39: $4$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1650
     2/39: $4$memwr$\rf$i8008_core.sv:795$1587_DATA[13:0]$1649
     3/39: $4$memwr$\rf$i8008_core.sv:795$1587_ADDR[2:0]$1648
     4/39: $4$mem2bits$\rf$i8008_core.sv:795$1586[13:0]$1647
     5/39: $3$memwr$\rf$i8008_core.sv:793$1585_EN[13:0]$1642
     6/39: $3$memwr$\rf$i8008_core.sv:793$1585_DATA[13:0]$1641
     7/39: $3$memwr$\rf$i8008_core.sv:793$1585_ADDR[2:0]$1640
     8/39: $3$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1646
     9/39: $3$memwr$\rf$i8008_core.sv:795$1587_DATA[13:0]$1645
    10/39: $3$memwr$\rf$i8008_core.sv:795$1587_ADDR[2:0]$1644
    11/39: $3$mem2bits$\rf$i8008_core.sv:795$1586[13:0]$1643
    12/39: $2$memwr$\rf$i8008_core.sv:791$1584_EN[13:0]$1629
    13/39: $2$memwr$\rf$i8008_core.sv:791$1584_DATA[13:0]$1628
    14/39: $2$memwr$\rf$i8008_core.sv:791$1584_ADDR[2:0]$1627
    15/39: $2$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1636
    16/39: $2$memwr$\rf$i8008_core.sv:795$1587_DATA[13:0]$1635
    17/39: $2$memwr$\rf$i8008_core.sv:795$1587_ADDR[2:0]$1634
    18/39: $2$mem2bits$\rf$i8008_core.sv:795$1586[13:0]$1633
    19/39: $2$memwr$\rf$i8008_core.sv:793$1585_EN[13:0]$1632
    20/39: $2$memwr$\rf$i8008_core.sv:793$1585_DATA[13:0]$1631
    21/39: $2$memwr$\rf$i8008_core.sv:793$1585_ADDR[2:0]$1630
    22/39: $1$memwr$\rf$i8008_core.sv:788$1583_EN[13:0]$1615
    23/39: $1$memwr$\rf$i8008_core.sv:787$1582_EN[13:0]$1614
    24/39: $1$memwr$\rf$i8008_core.sv:786$1581_EN[13:0]$1613
    25/39: $1$memwr$\rf$i8008_core.sv:785$1580_EN[13:0]$1612
    26/39: $1$memwr$\rf$i8008_core.sv:784$1579_EN[13:0]$1611
    27/39: $1$memwr$\rf$i8008_core.sv:783$1578_EN[13:0]$1610
    28/39: $1$memwr$\rf$i8008_core.sv:782$1577_EN[13:0]$1609
    29/39: $1$memwr$\rf$i8008_core.sv:781$1576_EN[13:0]$1608
    30/39: $1$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1625
    31/39: $1$memwr$\rf$i8008_core.sv:795$1587_DATA[13:0]$1624
    32/39: $1$memwr$\rf$i8008_core.sv:795$1587_ADDR[2:0]$1623
    33/39: $1$mem2bits$\rf$i8008_core.sv:795$1586[13:0]$1622
    34/39: $1$memwr$\rf$i8008_core.sv:793$1585_EN[13:0]$1621
    35/39: $1$memwr$\rf$i8008_core.sv:793$1585_DATA[13:0]$1620
    36/39: $1$memwr$\rf$i8008_core.sv:793$1585_ADDR[2:0]$1619
    37/39: $1$memwr$\rf$i8008_core.sv:791$1584_EN[13:0]$1618
    38/39: $1$memwr$\rf$i8008_core.sv:791$1584_DATA[13:0]$1617
    39/39: $1$memwr$\rf$i8008_core.sv:791$1584_ADDR[2:0]$1616
Creating decoders for process `\fsm_decoder.$proc$i8008_core.sv:709$1054'.
     1/2: $0\state[2:0]
     2/2: $0\cycle[1:0]
Creating decoders for process `\fsm_decoder.$proc$i8008_core.sv:0$998'.
     1/175: $1\ctrl_signals[39:0] [39:38]
     2/175: $82\ctrl_signals[6:6]
     3/175: $83\ctrl_signals[30:30]
     4/175: $65\ctrl_signals[39:38] [1]
     5/175: $60\ctrl_signals[7:3] [3]
     6/175: $78\ctrl_signals[7:6] [0]
     7/175: $77\ctrl_signals[4:4]
     8/175: $79\ctrl_signals[9:9]
     9/175: $80\ctrl_signals[33:33]
    10/175: $65\ctrl_signals[39:38] [0]
    11/175: $60\ctrl_signals[7:3] [1]
    12/175: $74\ctrl_signals[30:30]
    13/175: $76\ctrl_signals[39:38] [0]
    14/175: $75\ctrl_signals[32:32]
    15/175: $12\next_cycle[1:0]
    16/175: $12\next_state[2:0]
    17/175: $11\next_cycle[1:0]
    18/175: $11\next_state[2:0]
    19/175: $10\next_cycle[1:0]
    20/175: $10\next_state[2:0]
    21/175: $64\ctrl_signals[33:32] [1]
    22/175: $60\ctrl_signals[7:3] [4]
    23/175: $71\ctrl_signals[5:4] [0]
    24/175: $73\ctrl_signals[38:38]
    25/175: $70\ctrl_signals[1:0]
    26/175: $71\ctrl_signals[5:4] [1]
    27/175: $72\ctrl_signals[14:11] [0]
    28/175: $76\ctrl_signals[39:38] [1]
    29/175: $72\ctrl_signals[14:11] [3:1]
    30/175: $67\ctrl_signals[5:4] [0]
    31/175: $69\ctrl_signals[38:38]
    32/175: $66\ctrl_signals[1:0]
    33/175: $67\ctrl_signals[5:4] [1]
    34/175: $68\ctrl_signals[14:11] [0]
    35/175: $78\ctrl_signals[7:6] [1]
    36/175: $62\ctrl_signals[14:11]
    37/175: $60\ctrl_signals[7:3] [0]
    38/175: $59\ctrl_signals[1:0]
    39/175: $9\next_state[2:0]
    40/175: $9\next_cycle[1:0]
    41/175: $64\ctrl_signals[33:32] [0]
    42/175: $60\ctrl_signals[7:3] [2]
    43/175: $63\ctrl_signals[30:30]
    44/175: $61\ctrl_signals[9:9]
    45/175: $68\ctrl_signals[14:11] [3:1]
    46/175: $1\ctrl_signals[39:0] [32]
    47/175: $1\ctrl_signals[39:0] [30]
    48/175: $1\ctrl_signals[39:0] [28]
    49/175: $1\ctrl_signals[39:0] [9]
    50/175: $57\ctrl_signals[24:21] [2:0]
    51/175: $55\ctrl_signals[14:12]
    52/175: $58\ctrl_signals[30:30]
    53/175: $54\ctrl_signals[10:10]
    54/175: $56\ctrl_signals[17:17]
    55/175: $39\ctrl_signals[39:38] [1]
    56/175: $33\ctrl_signals[14:10] [1]
    57/175: $53\ctrl_signals[38:38]
    58/175: $37\ctrl_signals[30:29] [1]
    59/175: $51\ctrl_signals[39:38] [0]
    60/175: $50\ctrl_signals[30:29] [1]
    61/175: $50\ctrl_signals[30:29] [0]
    62/175: $8\next_state[2:0]
    63/175: $8\next_cycle[1:0]
    64/175: $39\ctrl_signals[39:38] [0]
    65/175: $46\ctrl_signals[5:4] [0]
    66/175: $49\ctrl_signals[38:38]
    67/175: $45\ctrl_signals[1:0]
    68/175: $46\ctrl_signals[5:4] [1]
    69/175: $48\ctrl_signals[30:30]
    70/175: $47\ctrl_signals[14:11] [0]
    71/175: $33\ctrl_signals[14:10] [0]
    72/175: $32\ctrl_signals[5:3] [0]
    73/175: $41\ctrl_signals[5:4] [0]
    74/175: $44\ctrl_signals[38:38]
    75/175: $40\ctrl_signals[1:0]
    76/175: $41\ctrl_signals[5:4] [1]
    77/175: $43\ctrl_signals[33:33]
    78/175: $42\ctrl_signals[14:11] [0]
    79/175: $32\ctrl_signals[5:3] [2:1]
    80/175: $38\ctrl_signals[33:33]
    81/175: $52\ctrl_signals[27:27]
    82/175: $33\ctrl_signals[14:10] [4:2]
    83/175: $31\ctrl_signals[1:0]
    84/175: $7\next_state[2:0]
    85/175: $7\next_cycle[1:0]
    86/175: $37\ctrl_signals[30:29] [0]
    87/175: $42\ctrl_signals[14:11] [3:1]
    88/175: $36\ctrl_signals[27:27]
    89/175: $35\ctrl_signals[24:21]
    90/175: $34\ctrl_signals[17:17]
    91/175: $51\ctrl_signals[39:38] [1]
    92/175: $47\ctrl_signals[14:11] [3:1]
    93/175: $1\ctrl_signals[39:0] [5:3]
    94/175: $1\ctrl_signals[39:0] [29]
    95/175: $1\ctrl_signals[39:0] [27]
    96/175: $1\ctrl_signals[39:0] [26]
    97/175: $1\ctrl_signals[39:0] [25]
    98/175: $1\ctrl_signals[39:0] [20:18]
    99/175: $1\ctrl_signals[39:0] [16]
   100/175: $1\ctrl_signals[39:0] [15]
   101/175: $1\ctrl_signals[39:0] [14:11]
   102/175: $1\ctrl_signals[39:0] [10]
   103/175: $1\ctrl_signals[39:0] [8]
   104/175: $1\ctrl_signals[39:0] [1:0]
   105/175: $1\ctrl_signals[39:0] [33]
   106/175: $57\ctrl_signals[24:21] [3]
   107/175: $81\ctrl_signals[4:4]
   108/175: $28\ctrl_signals[24:16] [0]
   109/175: $28\ctrl_signals[24:16] [1]
   110/175: $28\ctrl_signals[24:16] [4:2]
   111/175: $28\ctrl_signals[24:16] [7:5]
   112/175: $24\ctrl_signals[4:4]
   113/175: $25\ctrl_signals[6:6]
   114/175: $30\ctrl_signals[30:30]
   115/175: $29\ctrl_signals[26:26]
   116/175: $23\ctrl_signals[2:2]
   117/175: $27\ctrl_signals[14:12]
   118/175: $26\ctrl_signals[10:10]
   119/175: $7\ctrl_signals[39:38] [1]
   120/175: $3\ctrl_signals[14:9] [2]
   121/175: $6\next_state[2:0]
   122/175: $18\ctrl_signals[33:32] [1]
   123/175: $16\ctrl_signals[14:11] [0]
   124/175: $14\ctrl_signals[7:6] [0]
   125/175: $18\ctrl_signals[33:32] [0]
   126/175: $20\ctrl_signals[14:11] [0]
   127/175: $21\ctrl_signals[29:29]
   128/175: $22\ctrl_signals[38:38]
   129/175: $19\ctrl_signals[38:38]
   130/175: $17\ctrl_signals[29:29]
   131/175: $14\ctrl_signals[7:6] [1]
   132/175: $20\ctrl_signals[14:11] [3:1]
   133/175: $15\ctrl_signals[9:9]
   134/175: $16\ctrl_signals[14:11] [3:1]
   135/175: $13\ctrl_signals[4:4]
   136/175: $2\ctrl_signals[7:0] [5]
   137/175: $3\ctrl_signals[14:9] [1]
   138/175: $5\next_cycle[1:0]
   139/175: $4\next_cycle[1:0]
   140/175: $4\next_state[2:0]
   141/175: $3\next_state[2:0]
   142/175: $3\next_cycle[1:0]
   143/175: $12\ctrl_signals[39:39]
   144/175: $9\ctrl_signals[9:9]
   145/175: $8\ctrl_signals[7:7]
   146/175: $11\ctrl_signals[31:31]
   147/175: $10\ctrl_signals[29:29]
   148/175: $6\ctrl_signals[33:29] [2]
   149/175: $6\ctrl_signals[33:29] [1]
   150/175: $3\ctrl_signals[14:9] [0]
   151/175: $3\ctrl_signals[14:9] [5:3]
   152/175: $2\ctrl_signals[7:0] [7]
   153/175: $6\ctrl_signals[33:29] [0]
   154/175: $5\next_state[2:0]
   155/175: $7\ctrl_signals[39:38] [0]
   156/175: $2\ctrl_signals[7:0] [4]
   157/175: $2\ctrl_signals[7:0] [2]
   158/175: $2\ctrl_signals[7:0] [1:0]
   159/175: $2\next_state[2:0]
   160/175: $2\next_cycle[1:0]
   161/175: $6\ctrl_signals[33:29] [4:3]
   162/175: $2\ctrl_signals[7:0] [3]
   163/175: $5\ctrl_signals[26:26]
   164/175: $4\ctrl_signals[24:16]
   165/175: $2\ctrl_signals[7:0] [6]
   166/175: $6\next_cycle[1:0]
   167/175: $1\next_state[2:0]
   168/175: $1\next_cycle[1:0]
   169/175: $1\ctrl_signals[39:0] [37:34]
   170/175: $1\ctrl_signals[39:0] [31]
   171/175: $1\ctrl_signals[39:0] [24:21]
   172/175: $1\ctrl_signals[39:0] [17]
   173/175: $1\ctrl_signals[39:0] [7:6]
   174/175: $28\ctrl_signals[24:16] [8]
   175/175: $1\ctrl_signals[39:0] [2]
Creating decoders for process `\fsm_decoder.$proc$i8008_core.sv:0$994'.
     1/1: $1\CF[0:0]
Creating decoders for process `\ALU.$proc$i8008_core.sv:0$966'.
     1/8: $3\flag_in[3:3]
     2/8: $3\d[7:0]
     3/8: $2\NA[7:0]
     4/8: $2\flag_in[3:3]
     5/8: $2\d[7:0]
     6/8: $1\flag_in[3:3]
     7/8: $1\d[7:0]
     8/8: $1\NA[7:0]
Creating decoders for process `$paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core.$proc$i8008_core.sv:157$1563'.
     1/1: $0\instr[7:0]
Creating decoders for process `$paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core.$proc$i8008_core.sv:0$1559'.
     1/8: $7\bus[7:0]
     2/8: $6\bus[7:0]
     3/8: $5\bus[7:0]
     4/8: $4\bus[7:0] [7:4]
     5/8: $4\bus[7:0] [3:0]
     6/8: $3\bus[7:0]
     7/8: $2\bus[7:0]
     8/8: $1\bus[7:0]
Creating decoders for process `$paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core.$proc$i8008_core.sv:94$1556'.
     1/1: $0\Intr[0:0]
Creating decoders for process `\top.$proc$i8008_core.sv:0$943'.

3.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.\rs' from process `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$proc$i8008_core.sv:0$1693'.
No latch inferred for signal `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.\rs' from process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:0$1653'.
No latch inferred for signal `\fsm_decoder.\ctrl_signals' from process `\fsm_decoder.$proc$i8008_core.sv:0$998'.
No latch inferred for signal `\fsm_decoder.\next_cycle' from process `\fsm_decoder.$proc$i8008_core.sv:0$998'.
No latch inferred for signal `\fsm_decoder.\next_state' from process `\fsm_decoder.$proc$i8008_core.sv:0$998'.
No latch inferred for signal `\fsm_decoder.\CF' from process `\fsm_decoder.$proc$i8008_core.sv:0$994'.
No latch inferred for signal `\ALU.\d' from process `\ALU.$proc$i8008_core.sv:0$966'.
No latch inferred for signal `\ALU.\flag_in' from process `\ALU.$proc$i8008_core.sv:0$966'.
No latch inferred for signal `\ALU.\NA' from process `\ALU.$proc$i8008_core.sv:0$966'.
No latch inferred for signal `$paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core.\bus' from process `$paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core.$proc$i8008_core.sv:0$1559'.
No latch inferred for signal `\top.\led' from process `\top.$proc$i8008_core.sv:0$943'.

3.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1414$1416'.
  created $adff cell `$procdff$4184' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1353$1409'.
  created $dff cell `$procdff$4185' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1273$1405'.
  created $adff cell `$procdff$4186' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1212$1398'.
  created $dff cell `$procdff$4187' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1138$1395'.
  created $adff cell `$procdff$4188' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1088$1392'.
  created $dff cell `$procdff$4189' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1017$1389'.
  created $adff cell `$procdff$4190' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:967$1386'.
  created $dff cell `$procdff$4191' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:922$1384'.
  created $dff cell `$procdff$4192' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:882$1382'.
  created $dff cell `$procdff$4193' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:803$1378'.
  created $adff cell `$procdff$4194' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:742$1371'.
  created $dff cell `$procdff$4195' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:662$1367'.
  created $adff cell `$procdff$4196' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:601$1360'.
  created $dff cell `$procdff$4197' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:527$1357'.
  created $adff cell `$procdff$4198' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:477$1354'.
  created $dff cell `$procdff$4199' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:406$1351'.
  created $adff cell `$procdff$4200' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:356$1348'.
  created $dff cell `$procdff$4201' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:311$1346'.
  created $dff cell `$procdff$4202' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:271$1344'.
  created $dff cell `$procdff$4203' with positive edge clock.
Creating register for signal `$paramod\FlagRegister\WIDTH=s32'00000000000000000000000000000100.\Q' using process `$paramod\FlagRegister\WIDTH=s32'00000000000000000000000000000100.$proc$i8008_core.sv:824$1696'.
  created $dff cell `$procdff$4204' with positive edge clock.
Creating register for signal `$paramod\Register\WIDTH=s32'00000000000000000000000000001000.\Q' using process `$paramod\Register\WIDTH=s32'00000000000000000000000000001000.$proc$i8008_core.sv:810$1695'.
  created $dff cell `$procdff$4205' with positive edge clock.
Creating register for signal `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$memwr$\rf$i8008_core.sv:739$1661_EN' using process `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$proc$i8008_core.sv:737$1669'.
  created $dff cell `$procdff$4206' with positive edge clock.
Creating register for signal `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$memwr$\rf$i8008_core.sv:740$1662_EN' using process `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$proc$i8008_core.sv:737$1669'.
  created $dff cell `$procdff$4207' with positive edge clock.
Creating register for signal `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$memwr$\rf$i8008_core.sv:741$1663_EN' using process `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$proc$i8008_core.sv:737$1669'.
  created $dff cell `$procdff$4208' with positive edge clock.
Creating register for signal `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$memwr$\rf$i8008_core.sv:742$1664_EN' using process `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$proc$i8008_core.sv:737$1669'.
  created $dff cell `$procdff$4209' with positive edge clock.
Creating register for signal `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$memwr$\rf$i8008_core.sv:743$1665_EN' using process `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$proc$i8008_core.sv:737$1669'.
  created $dff cell `$procdff$4210' with positive edge clock.
Creating register for signal `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$memwr$\rf$i8008_core.sv:744$1666_EN' using process `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$proc$i8008_core.sv:737$1669'.
  created $dff cell `$procdff$4211' with positive edge clock.
Creating register for signal `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$memwr$\rf$i8008_core.sv:745$1667_EN' using process `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$proc$i8008_core.sv:737$1669'.
  created $dff cell `$procdff$4212' with positive edge clock.
Creating register for signal `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$memwr$\rf$i8008_core.sv:748$1668_ADDR' using process `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$proc$i8008_core.sv:737$1669'.
  created $dff cell `$procdff$4213' with positive edge clock.
Creating register for signal `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$memwr$\rf$i8008_core.sv:748$1668_DATA' using process `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$proc$i8008_core.sv:737$1669'.
  created $dff cell `$procdff$4214' with positive edge clock.
Creating register for signal `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$memwr$\rf$i8008_core.sv:748$1668_EN' using process `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$proc$i8008_core.sv:737$1669'.
  created $dff cell `$procdff$4215' with positive edge clock.
Creating register for signal `$paramod\Counter\WIDTH=s32'00000000000000000000000000000011.\Q' using process `$paramod\Counter\WIDTH=s32'00000000000000000000000000000011.$proc$i8008_core.sv:838$1655'.
  created $dff cell `$procdff$4216' with positive edge clock.
Creating register for signal `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$memwr$\rf$i8008_core.sv:781$1576_EN' using process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
  created $dff cell `$procdff$4217' with positive edge clock.
Creating register for signal `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$memwr$\rf$i8008_core.sv:782$1577_EN' using process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
  created $dff cell `$procdff$4218' with positive edge clock.
Creating register for signal `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$memwr$\rf$i8008_core.sv:783$1578_EN' using process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
  created $dff cell `$procdff$4219' with positive edge clock.
Creating register for signal `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$memwr$\rf$i8008_core.sv:784$1579_EN' using process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
  created $dff cell `$procdff$4220' with positive edge clock.
Creating register for signal `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$memwr$\rf$i8008_core.sv:785$1580_EN' using process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
  created $dff cell `$procdff$4221' with positive edge clock.
Creating register for signal `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$memwr$\rf$i8008_core.sv:786$1581_EN' using process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
  created $dff cell `$procdff$4222' with positive edge clock.
Creating register for signal `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$memwr$\rf$i8008_core.sv:787$1582_EN' using process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
  created $dff cell `$procdff$4223' with positive edge clock.
Creating register for signal `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$memwr$\rf$i8008_core.sv:788$1583_EN' using process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
  created $dff cell `$procdff$4224' with positive edge clock.
Creating register for signal `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$memwr$\rf$i8008_core.sv:791$1584_ADDR' using process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
  created $dff cell `$procdff$4225' with positive edge clock.
Creating register for signal `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$memwr$\rf$i8008_core.sv:791$1584_DATA' using process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
  created $dff cell `$procdff$4226' with positive edge clock.
Creating register for signal `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$memwr$\rf$i8008_core.sv:791$1584_EN' using process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
  created $dff cell `$procdff$4227' with positive edge clock.
Creating register for signal `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$memwr$\rf$i8008_core.sv:793$1585_ADDR' using process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
  created $dff cell `$procdff$4228' with positive edge clock.
Creating register for signal `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$memwr$\rf$i8008_core.sv:793$1585_DATA' using process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
  created $dff cell `$procdff$4229' with positive edge clock.
Creating register for signal `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$memwr$\rf$i8008_core.sv:793$1585_EN' using process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
  created $dff cell `$procdff$4230' with positive edge clock.
Creating register for signal `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$mem2bits$\rf$i8008_core.sv:795$1586' using process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
  created $dff cell `$procdff$4231' with positive edge clock.
Creating register for signal `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$memwr$\rf$i8008_core.sv:795$1587_ADDR' using process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
  created $dff cell `$procdff$4232' with positive edge clock.
Creating register for signal `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$memwr$\rf$i8008_core.sv:795$1587_DATA' using process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
  created $dff cell `$procdff$4233' with positive edge clock.
Creating register for signal `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$memwr$\rf$i8008_core.sv:795$1587_EN' using process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
  created $dff cell `$procdff$4234' with positive edge clock.
Creating register for signal `\fsm_decoder.\state' using process `\fsm_decoder.$proc$i8008_core.sv:709$1054'.
  created $dff cell `$procdff$4235' with positive edge clock.
Creating register for signal `\fsm_decoder.\cycle' using process `\fsm_decoder.$proc$i8008_core.sv:709$1054'.
  created $dff cell `$procdff$4236' with positive edge clock.
Creating register for signal `$paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core.\instr' using process `$paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core.$proc$i8008_core.sv:157$1563'.
  created $dff cell `$procdff$4237' with positive edge clock.
Creating register for signal `$paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core.\Intr' using process `$paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core.$proc$i8008_core.sv:94$1556'.
  created $dff cell `$procdff$4238' with positive edge clock.

3.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1419'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1414$1416'.
Removing empty process `SB_DFFNES.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1414$1416'.
Removing empty process `SB_DFFNESS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1415'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1353$1409'.
Removing empty process `SB_DFFNESS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1353$1409'.
Removing empty process `SB_DFFNER.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1408'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1273$1405'.
Removing empty process `SB_DFFNER.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1273$1405'.
Removing empty process `SB_DFFNESR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1404'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1212$1398'.
Removing empty process `SB_DFFNESR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1212$1398'.
Removing empty process `SB_DFFNS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1397'.
Removing empty process `SB_DFFNS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1138$1395'.
Removing empty process `SB_DFFNSS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1394'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1088$1392'.
Removing empty process `SB_DFFNSS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1088$1392'.
Removing empty process `SB_DFFNR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1391'.
Removing empty process `SB_DFFNR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1017$1389'.
Removing empty process `SB_DFFNSR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1388'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:967$1386'.
Removing empty process `SB_DFFNSR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:967$1386'.
Removing empty process `SB_DFFNE.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1385'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:922$1384'.
Removing empty process `SB_DFFNE.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:922$1384'.
Removing empty process `SB_DFFN.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1383'.
Removing empty process `SB_DFFN.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:882$1382'.
Removing empty process `SB_DFFES.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1381'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:803$1378'.
Removing empty process `SB_DFFES.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:803$1378'.
Removing empty process `SB_DFFESS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1377'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:742$1371'.
Removing empty process `SB_DFFESS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:742$1371'.
Removing empty process `SB_DFFER.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1370'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:662$1367'.
Removing empty process `SB_DFFER.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:662$1367'.
Removing empty process `SB_DFFESR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1366'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:601$1360'.
Removing empty process `SB_DFFESR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:601$1360'.
Removing empty process `SB_DFFS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1359'.
Removing empty process `SB_DFFS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:527$1357'.
Removing empty process `SB_DFFSS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1356'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:477$1354'.
Removing empty process `SB_DFFSS.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:477$1354'.
Removing empty process `SB_DFFR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1353'.
Removing empty process `SB_DFFR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:406$1351'.
Removing empty process `SB_DFFSR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1350'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:356$1348'.
Removing empty process `SB_DFFSR.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:356$1348'.
Removing empty process `SB_DFFE.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1347'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:311$1346'.
Removing empty process `SB_DFFE.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:311$1346'.
Removing empty process `SB_DFF.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$1345'.
Removing empty process `SB_DFF.$proc$/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:271$1344'.
Found and cleaned up 2 empty switches in `$paramod\FlagRegister\WIDTH=s32'00000000000000000000000000000100.$proc$i8008_core.sv:824$1696'.
Removing empty process `$paramod\FlagRegister\WIDTH=s32'00000000000000000000000000000100.$proc$i8008_core.sv:824$1696'.
Found and cleaned up 2 empty switches in `$paramod\Register\WIDTH=s32'00000000000000000000000000001000.$proc$i8008_core.sv:810$1695'.
Removing empty process `$paramod\Register\WIDTH=s32'00000000000000000000000000001000.$proc$i8008_core.sv:810$1695'.
Removing empty process `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$proc$i8008_core.sv:0$1693'.
Found and cleaned up 2 empty switches in `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$proc$i8008_core.sv:737$1669'.
Removing empty process `$paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.$proc$i8008_core.sv:737$1669'.
Found and cleaned up 4 empty switches in `$paramod\Counter\WIDTH=s32'00000000000000000000000000000011.$proc$i8008_core.sv:838$1655'.
Removing empty process `$paramod\Counter\WIDTH=s32'00000000000000000000000000000011.$proc$i8008_core.sv:838$1655'.
Removing empty process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:0$1653'.
Found and cleaned up 4 empty switches in `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
Removing empty process `$paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.$proc$i8008_core.sv:779$1589'.
Found and cleaned up 1 empty switch in `\fsm_decoder.$proc$i8008_core.sv:709$1054'.
Removing empty process `fsm_decoder.$proc$i8008_core.sv:709$1054'.
Found and cleaned up 26 empty switches in `\fsm_decoder.$proc$i8008_core.sv:0$998'.
Removing empty process `fsm_decoder.$proc$i8008_core.sv:0$998'.
Found and cleaned up 1 empty switch in `\fsm_decoder.$proc$i8008_core.sv:0$994'.
Removing empty process `fsm_decoder.$proc$i8008_core.sv:0$994'.
Found and cleaned up 3 empty switches in `\ALU.$proc$i8008_core.sv:0$966'.
Removing empty process `ALU.$proc$i8008_core.sv:0$966'.
Removing empty process `$paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core.$proc$i8008_core.sv:157$1563'.
Found and cleaned up 7 empty switches in `$paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core.$proc$i8008_core.sv:0$1559'.
Removing empty process `$paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core.$proc$i8008_core.sv:0$1559'.
Found and cleaned up 1 empty switch in `$paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core.$proc$i8008_core.sv:94$1556'.
Removing empty process `$paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core.$proc$i8008_core.sv:94$1556'.
Removing empty process `top.$proc$i8008_core.sv:0$943'.
Cleaned up 71 empty switches.

3.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\FlagRegister\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\WIDTH=s32'00000000000000000000000000001000.
Optimizing module $paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.
Optimizing module $paramod\Counter\WIDTH=s32'00000000000000000000000000000011.
Optimizing module $paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.
Optimizing module fsm_decoder.
<suppressed ~135 debug messages>
Optimizing module ALU.
<suppressed ~7 debug messages>
Optimizing module $paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core.
<suppressed ~1 debug messages>
Optimizing module top.

3.4. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod\FlagRegister\WIDTH=s32'00000000000000000000000000000100.
Deleting now unused module $paramod\Register\WIDTH=s32'00000000000000000000000000001000.
Deleting now unused module $paramod$0ec5feb0cc3bda9ef691eba4be3275d918b87df8\reg_file.
Deleting now unused module $paramod\Counter\WIDTH=s32'00000000000000000000000000000011.
Deleting now unused module $paramod$0e1b44e0ad8d898606d448a7b77b3618a4085869\stack.
Deleting now unused module fsm_decoder.
Deleting now unused module ALU.
Deleting now unused module $paramod$c1c89500fe4a73e0bc803a126dcf98c8be383bb5\i8008_core.
<suppressed ~9 debug messages>

3.5. Executing TRIBUF pass.

3.6. Executing DEMINOUT pass (demote inout ports to input or output).

3.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~64 debug messages>

3.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 70 unused cells and 547 unused wires.
<suppressed ~79 debug messages>

3.9. Executing CHECK pass (checking for obvious problems).
Checking module top...
Warning: Wire top.\uart_tx is used but has no driver.
Warning: Wire top.\display_sel [3] is used but has no driver.
Warning: Wire top.\display_sel [2] is used but has no driver.
Warning: Wire top.\display_sel [1] is used but has no driver.
Warning: Wire top.\display_sel [0] is used but has no driver.
Warning: Wire top.\display [7] is used but has no driver.
Warning: Wire top.\display [6] is used but has no driver.
Warning: Wire top.\display [5] is used but has no driver.
Warning: Wire top.\display [4] is used but has no driver.
Warning: Wire top.\display [3] is used but has no driver.
Warning: Wire top.\display [2] is used but has no driver.
Warning: Wire top.\display [1] is used but has no driver.
Warning: Wire top.\display [0] is used but has no driver.
Warning: Wire top.\base_led [7] is used but has no driver.
Warning: Wire top.\base_led [6] is used but has no driver.
Warning: Wire top.\base_led [5] is used but has no driver.
Warning: Wire top.\base_led [4] is used but has no driver.
Warning: Wire top.\base_led [3] is used but has no driver.
Warning: Wire top.\base_led [2] is used but has no driver.
Warning: Wire top.\base_led [1] is used but has no driver.
Warning: Wire top.\base_led [0] is used but has no driver.
Found and reported 21 problems.

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~4962 debug messages>
Removed a total of 1654 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4149.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2810.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3171.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2812.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3374.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2249.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3376.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3385.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2080.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3387.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4155.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2251.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2500.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2823.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3400.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3402.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3417.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3419.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3421.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2184.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3436.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4158.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2697.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3438.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4161.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3440.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3182.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3455.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2428.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3184.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3457.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2834.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3459.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3473.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4167.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3475.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2510.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4110.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4113.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2430.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3489.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3491.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4170.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3504.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2186.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3506.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3521.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2261.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3523.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2088.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3525.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4176.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2735.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3536.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2090.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3538.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2737.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2848.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3195.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4116.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2520.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3552.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2850.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3554.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3567.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3569.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3197.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2400.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2699.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2195.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3581.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2271.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2530.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2058.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4089.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2864.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3593.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3208.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3605.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4119.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3210.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2438.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3607.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2866.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4092.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3609.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3622.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3624.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2197.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2440.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3626.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2098.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3639.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3090.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3641.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2060.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2100.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2542.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3643.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2402.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4122.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3092.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2282.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2544.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2284.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2750.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2880.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3221.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2199.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3223.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2882.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2752.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3655.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4095.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3657.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2209.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3075.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2569.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2050.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2571.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2896.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3234.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3669.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3671.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2898.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3680.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3236.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3682.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3692.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2295.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3694.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2450.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3704.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2108.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3706.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2297.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3716.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2211.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3718.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2579.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3727.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2581.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3729.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2052.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2110.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2912.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3247.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2213.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3249.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3741.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2914.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2765.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2709.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2589.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2767.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2591.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3753.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2308.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2223.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2310.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3765.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2599.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2928.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4098.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3260.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2460.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2601.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2930.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3262.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3777.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2171.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2711.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2118.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2120.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3789.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2941.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2609.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2611.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2321.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3801.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3813.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2225.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2323.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3815.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3286.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3817.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2952.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2960.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3288.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2962.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2414.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3077.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3829.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2227.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2780.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2622.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2782.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2470.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3841.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2973.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2334.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2162.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2336.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3299.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3853.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2130.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3301.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2633.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2984.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2641.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3865.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2173.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2643.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2070.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2995.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3877.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2416.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4128.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2345.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4131.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3312.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3889.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4101.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2654.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3314.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3006.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4134.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3901.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2347.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2237.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2480.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2722.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2795.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3017.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2140.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3913.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2797.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3161.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3326.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2358.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3163.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3937.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2663.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4137.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2360.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2665.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3949.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3031.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3958.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2239.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3960.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3033.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2149.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2372.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2182.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3338.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3044.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2674.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3347.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2151.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4143.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2374.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$4004.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2676.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$4006.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3349.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4146.
    dead port 1/2 on $mux $flatten\DUT.\Stack.$procmux$1814.
    dead port 1/2 on $mux $flatten\DUT.\Stack.$procmux$1817.
    dead port 2/2 on $mux $flatten\DUT.\Stack.$procmux$1820.
    dead port 1/2 on $mux $flatten\DUT.\Stack.$procmux$1826.
    dead port 1/2 on $mux $flatten\DUT.\Stack.$procmux$1829.
    dead port 2/2 on $mux $flatten\DUT.\Stack.$procmux$1832.
    dead port 1/2 on $mux $flatten\DUT.\Stack.$procmux$1838.
    dead port 1/2 on $mux $flatten\DUT.\Stack.$procmux$1841.
    dead port 2/2 on $mux $flatten\DUT.\Stack.$procmux$1844.
    dead port 1/2 on $mux $flatten\DUT.\Stack.$procmux$1862.
    dead port 2/2 on $mux $flatten\DUT.\Stack.$procmux$1865.
    dead port 1/2 on $mux $flatten\DUT.\Stack.$procmux$1871.
    dead port 2/2 on $mux $flatten\DUT.\Stack.$procmux$1874.
    dead port 1/2 on $mux $flatten\DUT.\Stack.$procmux$1880.
    dead port 2/2 on $mux $flatten\DUT.\Stack.$procmux$1883.
    dead port 1/2 on $mux $flatten\DUT.\Stack.$procmux$1889.
    dead port 2/2 on $mux $flatten\DUT.\Stack.$procmux$1892.
    dead port 1/2 on $mux $flatten\DUT.\Stack.$procmux$1898.
    dead port 2/2 on $mux $flatten\DUT.\Stack.$procmux$1901.
    dead port 1/2 on $mux $flatten\DUT.\Stack.$procmux$1907.
    dead port 2/2 on $mux $flatten\DUT.\Stack.$procmux$1910.
    dead port 2/2 on $mux $flatten\DUT.\Stack.$procmux$1925.
    dead port 2/2 on $mux $flatten\DUT.\Stack.$procmux$1931.
    dead port 2/2 on $mux $flatten\DUT.\Stack.$procmux$1937.
    dead port 2/2 on $mux $flatten\DUT.\Stack.$procmux$1943.
    dead port 2/2 on $mux $flatten\DUT.\Stack.$procmux$1949.
    dead port 2/2 on $mux $flatten\DUT.\Stack.$procmux$1955.
    dead port 2/2 on $mux $flatten\DUT.\Stack.$procmux$1967.
    dead port 2/2 on $mux $flatten\DUT.\Stack.$procmux$1973.
    dead port 2/2 on $mux $flatten\DUT.\Stack.$procmux$1979.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3055.
    dead port 1/2 on $mux $flatten\DUT.\Unit.$procmux$4028.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2490.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3358.
    dead port 1/2 on $mux $flatten\DUT.\Unit.$procmux$4040.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2386.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3066.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3360.
    dead port 1/2 on $mux $flatten\DUT.\Unit.$procmux$4052.
    dead port 2/2 on $mux $flatten\DUT.\Unit.$procmux$4063.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2685.
    dead port 1/2 on $mux $flatten\DUT.$procmux$4104.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2388.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2687.
    dead port 2/2 on $mux $flatten\DUT.\Unit.$procmux$4074.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$2160.
    dead port 2/2 on $mux $flatten\DUT.\rf.$procmux$1755.
    dead port 2/2 on $mux $flatten\DUT.\rf.$procmux$1761.
    dead port 2/2 on $mux $flatten\DUT.\rf.$procmux$1767.
    dead port 2/2 on $mux $flatten\DUT.\Brain.$procmux$3169.
Removed 317 multiplexer ports.
<suppressed ~58 debug messages>

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3794: { $flatten\DUT.\Brain.$procmux$2161_CTRL $flatten\DUT.\Brain.$procmux$2065_CMP $auto$opt_reduce.cc:134:opt_pmux$4259 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3190: { $auto$opt_reduce.cc:134:opt_pmux$4263 $auto$opt_reduce.cc:134:opt_pmux$4261 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2945: { $flatten\DUT.\Brain.$procmux$2401_CTRL $auto$opt_reduce.cc:134:opt_pmux$4265 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2123: { $flatten\DUT.\Brain.$procmux$2401_CTRL $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2161_CTRL $auto$opt_reduce.cc:134:opt_pmux$4267 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2715: { $flatten\DUT.\Brain.$procmux$2401_CTRL $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2161_CTRL $flatten\DUT.\Brain.$procmux$2065_CMP $auto$opt_reduce.cc:134:opt_pmux$4269 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2615: { $flatten\DUT.\Brain.$procmux$2161_CTRL $auto$opt_reduce.cc:134:opt_pmux$4271 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2844: { $flatten\DUT.\Brain.$procmux$3089_CTRL $auto$opt_reduce.cc:134:opt_pmux$4273 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2816: { $auto$opt_reduce.cc:134:opt_pmux$4275 $flatten\DUT.\Brain.$procmux$2051_CMP }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2523: { $flatten\DUT.\Brain.$procmux$2065_CMP $auto$opt_reduce.cc:134:opt_pmux$4277 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2292: $auto$opt_reduce.cc:134:opt_pmux$4279
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2860: $auto$opt_reduce.cc:134:opt_pmux$4281
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3822: { $auto$opt_reduce.cc:134:opt_pmux$4285 $flatten\DUT.\Brain.$procmux$2065_CMP $auto$opt_reduce.cc:134:opt_pmux$4283 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2254: { $flatten\DUT.\Brain.$procmux$2065_CMP $auto$opt_reduce.cc:134:opt_pmux$4287 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3229: { $flatten\DUT.\Brain.$eq$i8008_core.sv:319$1001_Y $auto$opt_reduce.cc:134:opt_pmux$4289 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2892: { $flatten\DUT.\Brain.$procmux$3089_CTRL $auto$opt_reduce.cc:134:opt_pmux$4291 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3294: { $flatten\DUT.\Brain.$procmux$3180_CTRL $auto$opt_reduce.cc:134:opt_pmux$4293 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2966: { $flatten\DUT.\Brain.$procmux$2401_CTRL $flatten\DUT.\Brain.$procmux$2068_CMP $auto$opt_reduce.cc:134:opt_pmux$4295 $flatten\DUT.\Brain.$procmux$2051_CMP }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3574: { $auto$opt_reduce.cc:134:opt_pmux$4299 $auto$opt_reduce.cc:134:opt_pmux$4297 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2095: $auto$opt_reduce.cc:134:opt_pmux$4301
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3834: { $flatten\DUT.\Brain.$procmux$2401_CTRL $auto$opt_reduce.cc:134:opt_pmux$4303 $flatten\DUT.\Brain.$procmux$2051_CMP }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2063: { $flatten\DUT.\Brain.$procmux$2161_CTRL $auto$opt_reduce.cc:134:opt_pmux$4305 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2746: $auto$opt_reduce.cc:134:opt_pmux$4307
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2626: { $flatten\DUT.\Brain.$procmux$2401_CTRL $flatten\DUT.\Brain.$procmux$2068_CMP $auto$opt_reduce.cc:134:opt_pmux$4309 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3846: { $auto$opt_reduce.cc:134:opt_pmux$4311 $flatten\DUT.\Brain.$procmux$2051_CMP }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2977: { $flatten\DUT.\Brain.$procmux$2401_CTRL $flatten\DUT.\Brain.$procmux$2068_CMP $auto$opt_reduce.cc:134:opt_pmux$4313 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2791: { $auto$opt_reduce.cc:134:opt_pmux$4315 $flatten\DUT.\Brain.$procmux$3087_CTRL }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3203: { $flatten\DUT.\Brain.$procmux$3180_CTRL $auto$opt_reduce.cc:134:opt_pmux$4317 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3858: $auto$opt_reduce.cc:134:opt_pmux$4319
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3086: { $flatten\DUT.\Brain.$procmux$3088_CTRL $auto$opt_reduce.cc:134:opt_pmux$4321 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3307: { $flatten\DUT.\Brain.$eq$i8008_core.sv:319$1001_Y $auto$opt_reduce.cc:134:opt_pmux$4323 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2133: { $flatten\DUT.\Brain.$procmux$2401_CTRL $flatten\DUT.\Brain.$procmux$2068_CMP $auto$opt_reduce.cc:134:opt_pmux$4325 $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2647: { $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2161_CTRL $auto$opt_reduce.cc:134:opt_pmux$4327 $flatten\DUT.\Brain.$procmux$2051_CMP }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3882: { $auto$opt_reduce.cc:134:opt_pmux$4329 $flatten\DUT.\Brain.$procmux$2161_CTRL $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2999: { $flatten\DUT.\Brain.$procmux$2161_CTRL $auto$opt_reduce.cc:134:opt_pmux$4331 $flatten\DUT.\Brain.$procmux$2051_CMP }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2073: { $auto$opt_reduce.cc:134:opt_pmux$4333 $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3894: { $flatten\DUT.\Brain.$procmux$2065_CMP $auto$opt_reduce.cc:134:opt_pmux$4335 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3586: { $auto$opt_reduce.cc:134:opt_pmux$4337 $flatten\DUT.\Brain.$procmux$2051_CMP }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3010: { $flatten\DUT.\Brain.$procmux$2161_CTRL $auto$opt_reduce.cc:134:opt_pmux$4339 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2908: { $auto$opt_reduce.cc:134:opt_pmux$4341 $flatten\DUT.\Brain.$procmux$3087_CTRL }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3319: { $flatten\DUT.\Brain.$procmux$2161_CTRL $auto$opt_reduce.cc:134:opt_pmux$4343 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3397: $auto$opt_reduce.cc:134:opt_pmux$4345
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3242: { $flatten\DUT.\Brain.$eq$i8008_core.sv:319$1001_Y $auto$opt_reduce.cc:134:opt_pmux$4347 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3906: { $flatten\DUT.\Brain.$procmux$2068_CMP $auto$opt_reduce.cc:134:opt_pmux$4349 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2513: { $flatten\DUT.\Brain.$procmux$2161_CTRL $auto$opt_reduce.cc:134:opt_pmux$4351 $flatten\DUT.\Brain.$procmux$2051_CMP }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2279: $auto$opt_reduce.cc:134:opt_pmux$4353
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3027: { $flatten\DUT.\Brain.$procmux$3088_CTRL $auto$opt_reduce.cc:134:opt_pmux$4355 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3930: { $auto$opt_reduce.cc:134:opt_pmux$4357 $flatten\DUT.\Brain.$procmux$2051_CMP }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2483: { $flatten\DUT.\Brain.$procmux$2161_CTRL $auto$opt_reduce.cc:134:opt_pmux$4359 $flatten\DUT.\Brain.$procmux$2051_CMP }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2806: { $flatten\DUT.\Brain.$procmux$3088_CTRL $auto$opt_reduce.cc:134:opt_pmux$4361 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2453: { $flatten\DUT.\Brain.$procmux$2068_CMP $auto$opt_reduce.cc:134:opt_pmux$4363 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3942: { $auto$opt_reduce.cc:134:opt_pmux$4365 $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3331: { $flatten\DUT.\Brain.$procmux$2065_CMP $auto$opt_reduce.cc:134:opt_pmux$4367 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2731: $auto$opt_reduce.cc:134:opt_pmux$4369
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3037: { $flatten\DUT.\Brain.$procmux$2065_CMP $auto$opt_reduce.cc:134:opt_pmux$4371 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3999: { $flatten\DUT.\Brain.$eq$i8008_core.sv:319$1001_Y $auto$opt_reduce.cc:134:opt_pmux$4373 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3734: { $flatten\DUT.\Brain.$procmux$2161_CTRL $auto$opt_reduce.cc:134:opt_pmux$4375 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3048: { $auto$opt_reduce.cc:134:opt_pmux$4377 $flatten\DUT.\Brain.$procmux$2051_CMP }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3216: { $auto$opt_reduce.cc:134:opt_pmux$4381 $auto$opt_reduce.cc:134:opt_pmux$4379 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2115: $auto$opt_reduce.cc:134:opt_pmux$4383
    Consolidated identical input bits for $mux cell $flatten\DUT.\Stack.$procmux$1811:
      Old ports: A=14'00000000000000, B=14'11111111111111, Y=$flatten\DUT.\Stack.$procmux$1811_Y
      New ports: A=1'0, B=1'1, Y=$flatten\DUT.\Stack.$procmux$1811_Y [0]
      New connections: $flatten\DUT.\Stack.$procmux$1811_Y [13:1] = { $flatten\DUT.\Stack.$procmux$1811_Y [0] $flatten\DUT.\Stack.$procmux$1811_Y [0] $flatten\DUT.\Stack.$procmux$1811_Y [0] $flatten\DUT.\Stack.$procmux$1811_Y [0] $flatten\DUT.\Stack.$procmux$1811_Y [0] $flatten\DUT.\Stack.$procmux$1811_Y [0] $flatten\DUT.\Stack.$procmux$1811_Y [0] $flatten\DUT.\Stack.$procmux$1811_Y [0] $flatten\DUT.\Stack.$procmux$1811_Y [0] $flatten\DUT.\Stack.$procmux$1811_Y [0] $flatten\DUT.\Stack.$procmux$1811_Y [0] $flatten\DUT.\Stack.$procmux$1811_Y [0] $flatten\DUT.\Stack.$procmux$1811_Y [0] }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3746: { $auto$opt_reduce.cc:134:opt_pmux$4385 $flatten\DUT.\Brain.$procmux$2051_CMP }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2924: { $flatten\DUT.\Brain.$procmux$3088_CTRL $auto$opt_reduce.cc:134:opt_pmux$4387 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3255: { $flatten\DUT.\Brain.$eq$i8008_core.sv:319$1001_Y $auto$opt_reduce.cc:134:opt_pmux$4389 }
    Consolidated identical input bits for $mux cell $flatten\DUT.\Stack.$procmux$1859:
      Old ports: A=14'00000000000000, B=14'11111100000000, Y=$flatten\DUT.\Stack.$procmux$1859_Y
      New ports: A=1'0, B=1'1, Y=$flatten\DUT.\Stack.$procmux$1859_Y [8]
      New connections: { $flatten\DUT.\Stack.$procmux$1859_Y [13:9] $flatten\DUT.\Stack.$procmux$1859_Y [7:0] } = { $flatten\DUT.\Stack.$procmux$1859_Y [8] $flatten\DUT.\Stack.$procmux$1859_Y [8] $flatten\DUT.\Stack.$procmux$1859_Y [8] $flatten\DUT.\Stack.$procmux$1859_Y [8] $flatten\DUT.\Stack.$procmux$1859_Y [8] 8'00000000 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2264: { $flatten\DUT.\Brain.$procmux$2065_CMP $auto$opt_reduce.cc:134:opt_pmux$4391 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3758: { $flatten\DUT.\Brain.$procmux$2161_CTRL $flatten\DUT.\Brain.$procmux$2065_CMP $auto$opt_reduce.cc:134:opt_pmux$4393 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2596: $auto$opt_reduce.cc:134:opt_pmux$4395
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2776: { $flatten\DUT.\Brain.$procmux$3089_CTRL $auto$opt_reduce.cc:134:opt_pmux$4397 }
    Consolidated identical input bits for $mux cell $flatten\DUT.\Stack.$procmux$1922:
      Old ports: A=14'00000000000000, B=14'11111111111111, Y=$flatten\DUT.\Stack.$procmux$1922_Y
      New ports: A=1'0, B=1'1, Y=$flatten\DUT.\Stack.$procmux$1922_Y [0]
      New connections: $flatten\DUT.\Stack.$procmux$1922_Y [13:1] = { $flatten\DUT.\Stack.$procmux$1922_Y [0] $flatten\DUT.\Stack.$procmux$1922_Y [0] $flatten\DUT.\Stack.$procmux$1922_Y [0] $flatten\DUT.\Stack.$procmux$1922_Y [0] $flatten\DUT.\Stack.$procmux$1922_Y [0] $flatten\DUT.\Stack.$procmux$1922_Y [0] $flatten\DUT.\Stack.$procmux$1922_Y [0] $flatten\DUT.\Stack.$procmux$1922_Y [0] $flatten\DUT.\Stack.$procmux$1922_Y [0] $flatten\DUT.\Stack.$procmux$1922_Y [0] $flatten\DUT.\Stack.$procmux$1922_Y [0] $flatten\DUT.\Stack.$procmux$1922_Y [0] $flatten\DUT.\Stack.$procmux$1922_Y [0] }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3177: { $flatten\DUT.\Brain.$procmux$3180_CTRL $auto$opt_reduce.cc:134:opt_pmux$4399 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3770: { $auto$opt_reduce.cc:134:opt_pmux$4401 $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    Consolidated identical input bits for $mux cell $flatten\DUT.\Stack.$procmux$1982:
      Old ports: A=14'11111111111111, B=14'00000000000000, Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:788$1583_EN[13:0]$1597
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:788$1583_EN[13:0]$1597 [0]
      New connections: $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:788$1583_EN[13:0]$1597 [13:1] = { $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:788$1583_EN[13:0]$1597 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:788$1583_EN[13:0]$1597 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:788$1583_EN[13:0]$1597 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:788$1583_EN[13:0]$1597 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:788$1583_EN[13:0]$1597 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:788$1583_EN[13:0]$1597 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:788$1583_EN[13:0]$1597 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:788$1583_EN[13:0]$1597 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:788$1583_EN[13:0]$1597 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:788$1583_EN[13:0]$1597 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:788$1583_EN[13:0]$1597 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:788$1583_EN[13:0]$1597 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:788$1583_EN[13:0]$1597 [0] }
    Consolidated identical input bits for $mux cell $flatten\DUT.\Stack.$procmux$1985:
      Old ports: A=14'11111111111111, B=14'00000000000000, Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:787$1582_EN[13:0]$1596
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:787$1582_EN[13:0]$1596 [0]
      New connections: $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:787$1582_EN[13:0]$1596 [13:1] = { $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:787$1582_EN[13:0]$1596 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:787$1582_EN[13:0]$1596 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:787$1582_EN[13:0]$1596 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:787$1582_EN[13:0]$1596 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:787$1582_EN[13:0]$1596 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:787$1582_EN[13:0]$1596 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:787$1582_EN[13:0]$1596 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:787$1582_EN[13:0]$1596 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:787$1582_EN[13:0]$1596 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:787$1582_EN[13:0]$1596 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:787$1582_EN[13:0]$1596 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:787$1582_EN[13:0]$1596 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:787$1582_EN[13:0]$1596 [0] }
    Consolidated identical input bits for $mux cell $flatten\DUT.\Stack.$procmux$1988:
      Old ports: A=14'11111111111111, B=14'00000000000000, Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:786$1581_EN[13:0]$1595
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:786$1581_EN[13:0]$1595 [0]
      New connections: $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:786$1581_EN[13:0]$1595 [13:1] = { $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:786$1581_EN[13:0]$1595 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:786$1581_EN[13:0]$1595 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:786$1581_EN[13:0]$1595 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:786$1581_EN[13:0]$1595 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:786$1581_EN[13:0]$1595 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:786$1581_EN[13:0]$1595 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:786$1581_EN[13:0]$1595 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:786$1581_EN[13:0]$1595 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:786$1581_EN[13:0]$1595 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:786$1581_EN[13:0]$1595 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:786$1581_EN[13:0]$1595 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:786$1581_EN[13:0]$1595 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:786$1581_EN[13:0]$1595 [0] }
    Consolidated identical input bits for $mux cell $flatten\DUT.\Stack.$procmux$1991:
      Old ports: A=14'11111111111111, B=14'00000000000000, Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:785$1580_EN[13:0]$1594
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:785$1580_EN[13:0]$1594 [0]
      New connections: $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:785$1580_EN[13:0]$1594 [13:1] = { $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:785$1580_EN[13:0]$1594 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:785$1580_EN[13:0]$1594 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:785$1580_EN[13:0]$1594 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:785$1580_EN[13:0]$1594 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:785$1580_EN[13:0]$1594 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:785$1580_EN[13:0]$1594 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:785$1580_EN[13:0]$1594 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:785$1580_EN[13:0]$1594 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:785$1580_EN[13:0]$1594 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:785$1580_EN[13:0]$1594 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:785$1580_EN[13:0]$1594 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:785$1580_EN[13:0]$1594 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:785$1580_EN[13:0]$1594 [0] }
    Consolidated identical input bits for $mux cell $flatten\DUT.\Stack.$procmux$1994:
      Old ports: A=14'11111111111111, B=14'00000000000000, Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:784$1579_EN[13:0]$1593
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:784$1579_EN[13:0]$1593 [0]
      New connections: $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:784$1579_EN[13:0]$1593 [13:1] = { $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:784$1579_EN[13:0]$1593 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:784$1579_EN[13:0]$1593 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:784$1579_EN[13:0]$1593 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:784$1579_EN[13:0]$1593 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:784$1579_EN[13:0]$1593 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:784$1579_EN[13:0]$1593 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:784$1579_EN[13:0]$1593 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:784$1579_EN[13:0]$1593 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:784$1579_EN[13:0]$1593 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:784$1579_EN[13:0]$1593 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:784$1579_EN[13:0]$1593 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:784$1579_EN[13:0]$1593 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:784$1579_EN[13:0]$1593 [0] }
    Consolidated identical input bits for $mux cell $flatten\DUT.\Stack.$procmux$1997:
      Old ports: A=14'11111111111111, B=14'00000000000000, Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:783$1578_EN[13:0]$1592
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:783$1578_EN[13:0]$1592 [0]
      New connections: $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:783$1578_EN[13:0]$1592 [13:1] = { $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:783$1578_EN[13:0]$1592 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:783$1578_EN[13:0]$1592 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:783$1578_EN[13:0]$1592 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:783$1578_EN[13:0]$1592 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:783$1578_EN[13:0]$1592 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:783$1578_EN[13:0]$1592 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:783$1578_EN[13:0]$1592 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:783$1578_EN[13:0]$1592 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:783$1578_EN[13:0]$1592 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:783$1578_EN[13:0]$1592 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:783$1578_EN[13:0]$1592 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:783$1578_EN[13:0]$1592 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:783$1578_EN[13:0]$1592 [0] }
    Consolidated identical input bits for $mux cell $flatten\DUT.\Stack.$procmux$2000:
      Old ports: A=14'11111111111111, B=14'00000000000000, Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:782$1577_EN[13:0]$1591
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:782$1577_EN[13:0]$1591 [0]
      New connections: $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:782$1577_EN[13:0]$1591 [13:1] = { $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:782$1577_EN[13:0]$1591 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:782$1577_EN[13:0]$1591 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:782$1577_EN[13:0]$1591 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:782$1577_EN[13:0]$1591 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:782$1577_EN[13:0]$1591 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:782$1577_EN[13:0]$1591 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:782$1577_EN[13:0]$1591 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:782$1577_EN[13:0]$1591 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:782$1577_EN[13:0]$1591 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:782$1577_EN[13:0]$1591 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:782$1577_EN[13:0]$1591 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:782$1577_EN[13:0]$1591 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:782$1577_EN[13:0]$1591 [0] }
    Consolidated identical input bits for $mux cell $flatten\DUT.\Stack.$procmux$2003:
      Old ports: A=14'11111111111111, B=14'00000000000000, Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:781$1576_EN[13:0]$1590
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:781$1576_EN[13:0]$1590 [0]
      New connections: $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:781$1576_EN[13:0]$1590 [13:1] = { $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:781$1576_EN[13:0]$1590 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:781$1576_EN[13:0]$1590 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:781$1576_EN[13:0]$1590 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:781$1576_EN[13:0]$1590 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:781$1576_EN[13:0]$1590 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:781$1576_EN[13:0]$1590 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:781$1576_EN[13:0]$1590 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:781$1576_EN[13:0]$1590 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:781$1576_EN[13:0]$1590 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:781$1576_EN[13:0]$1590 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:781$1576_EN[13:0]$1590 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:781$1576_EN[13:0]$1590 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:781$1576_EN[13:0]$1590 [0] }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2383: $auto$opt_reduce.cc:134:opt_pmux$4403
    New ctrl vector for $pmux cell $flatten\DUT.\Unit.$procmux$4018: { $flatten\DUT.\Unit.$procmux$4026_CMP $flatten\DUT.\Unit.$procmux$4025_CMP $flatten\DUT.\Unit.$procmux$4023_CMP $auto$opt_reduce.cc:134:opt_pmux$4407 $auto$opt_reduce.cc:134:opt_pmux$4405 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2443: { $flatten\DUT.\Brain.$procmux$2401_CTRL $flatten\DUT.\Brain.$procmux$2068_CMP $auto$opt_reduce.cc:134:opt_pmux$4409 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3059: { $auto$opt_reduce.cc:134:opt_pmux$4411 $flatten\DUT.\Brain.$procmux$2051_CMP }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2503: { $flatten\DUT.\Brain.$procmux$2401_CTRL $flatten\DUT.\Brain.$procmux$2068_CMP $auto$opt_reduce.cc:134:opt_pmux$4413 }
    New ctrl vector for $pmux cell $flatten\DUT.\Unit.$procmux$4042: { $auto$opt_reduce.cc:134:opt_pmux$4415 $flatten\DUT.\Unit.$eq$i8008_core.sv:253$987_Y }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2493: { $flatten\DUT.\Brain.$procmux$2161_CTRL $auto$opt_reduce.cc:134:opt_pmux$4417 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2934: { $flatten\DUT.\Brain.$procmux$2401_CTRL $flatten\DUT.\Brain.$procmux$2068_CMP $auto$opt_reduce.cc:134:opt_pmux$4419 }
    New ctrl vector for $pmux cell $flatten\DUT.\Unit.$procmux$4056: { $flatten\DUT.\Unit.$procmux$4062_CMP $flatten\DUT.\Unit.$procmux$4061_CMP $auto$opt_reduce.cc:134:opt_pmux$4423 $auto$opt_reduce.cc:134:opt_pmux$4421 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2827: { $flatten\DUT.\Brain.$procmux$2068_CMP $auto$opt_reduce.cc:134:opt_pmux$4425 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2606: $auto$opt_reduce.cc:134:opt_pmux$4427
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3370: { $flatten\DUT.\Brain.$procmux$3373_CTRL $auto$opt_reduce.cc:134:opt_pmux$4429 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3782: { $flatten\DUT.\Brain.$procmux$2161_CTRL $auto$opt_reduce.cc:134:opt_pmux$4431 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3281: { $flatten\DUT.\Brain.$eq$i8008_core.sv:319$1001_Y $auto$opt_reduce.cc:134:opt_pmux$4433 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2694: $auto$opt_reduce.cc:134:opt_pmux$4435
    Consolidated identical input bits for $mux cell $flatten\DUT.\rf.$procmux$1752:
      Old ports: A=8'00000000, B=8'11111111, Y=$flatten\DUT.\rf.$procmux$1752_Y
      New ports: A=1'0, B=1'1, Y=$flatten\DUT.\rf.$procmux$1752_Y [0]
      New connections: $flatten\DUT.\rf.$procmux$1752_Y [7:1] = { $flatten\DUT.\rf.$procmux$1752_Y [0] $flatten\DUT.\rf.$procmux$1752_Y [0] $flatten\DUT.\rf.$procmux$1752_Y [0] $flatten\DUT.\rf.$procmux$1752_Y [0] $flatten\DUT.\rf.$procmux$1752_Y [0] $flatten\DUT.\rf.$procmux$1752_Y [0] $flatten\DUT.\rf.$procmux$1752_Y [0] }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2463: { $flatten\DUT.\Brain.$procmux$2401_CTRL $flatten\DUT.\Brain.$procmux$2068_CMP $auto$opt_reduce.cc:134:opt_pmux$4437 }
    Consolidated identical input bits for $mux cell $flatten\DUT.\rf.$procmux$1770:
      Old ports: A=8'11111111, B=8'00000000, Y=$flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:745$1667_EN[7:0]$1676
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:745$1667_EN[7:0]$1676 [0]
      New connections: $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:745$1667_EN[7:0]$1676 [7:1] = { $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:745$1667_EN[7:0]$1676 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:745$1667_EN[7:0]$1676 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:745$1667_EN[7:0]$1676 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:745$1667_EN[7:0]$1676 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:745$1667_EN[7:0]$1676 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:745$1667_EN[7:0]$1676 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:745$1667_EN[7:0]$1676 [0] }
    Consolidated identical input bits for $mux cell $flatten\DUT.\rf.$procmux$1773:
      Old ports: A=8'11111111, B=8'00000000, Y=$flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:744$1666_EN[7:0]$1675
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:744$1666_EN[7:0]$1675 [0]
      New connections: $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:744$1666_EN[7:0]$1675 [7:1] = { $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:744$1666_EN[7:0]$1675 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:744$1666_EN[7:0]$1675 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:744$1666_EN[7:0]$1675 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:744$1666_EN[7:0]$1675 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:744$1666_EN[7:0]$1675 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:744$1666_EN[7:0]$1675 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:744$1666_EN[7:0]$1675 [0] }
    Consolidated identical input bits for $mux cell $flatten\DUT.\rf.$procmux$1776:
      Old ports: A=8'11111111, B=8'00000000, Y=$flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:743$1665_EN[7:0]$1674
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:743$1665_EN[7:0]$1674 [0]
      New connections: $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:743$1665_EN[7:0]$1674 [7:1] = { $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:743$1665_EN[7:0]$1674 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:743$1665_EN[7:0]$1674 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:743$1665_EN[7:0]$1674 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:743$1665_EN[7:0]$1674 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:743$1665_EN[7:0]$1674 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:743$1665_EN[7:0]$1674 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:743$1665_EN[7:0]$1674 [0] }
    Consolidated identical input bits for $mux cell $flatten\DUT.\rf.$procmux$1779:
      Old ports: A=8'11111111, B=8'00000000, Y=$flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:742$1664_EN[7:0]$1673
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:742$1664_EN[7:0]$1673 [0]
      New connections: $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:742$1664_EN[7:0]$1673 [7:1] = { $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:742$1664_EN[7:0]$1673 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:742$1664_EN[7:0]$1673 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:742$1664_EN[7:0]$1673 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:742$1664_EN[7:0]$1673 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:742$1664_EN[7:0]$1673 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:742$1664_EN[7:0]$1673 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:742$1664_EN[7:0]$1673 [0] }
    Consolidated identical input bits for $mux cell $flatten\DUT.\rf.$procmux$1782:
      Old ports: A=8'11111111, B=8'00000000, Y=$flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:741$1663_EN[7:0]$1672
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:741$1663_EN[7:0]$1672 [0]
      New connections: $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:741$1663_EN[7:0]$1672 [7:1] = { $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:741$1663_EN[7:0]$1672 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:741$1663_EN[7:0]$1672 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:741$1663_EN[7:0]$1672 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:741$1663_EN[7:0]$1672 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:741$1663_EN[7:0]$1672 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:741$1663_EN[7:0]$1672 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:741$1663_EN[7:0]$1672 [0] }
    Consolidated identical input bits for $mux cell $flatten\DUT.\rf.$procmux$1785:
      Old ports: A=8'11111111, B=8'00000000, Y=$flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:740$1662_EN[7:0]$1671
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:740$1662_EN[7:0]$1671 [0]
      New connections: $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:740$1662_EN[7:0]$1671 [7:1] = { $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:740$1662_EN[7:0]$1671 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:740$1662_EN[7:0]$1671 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:740$1662_EN[7:0]$1671 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:740$1662_EN[7:0]$1671 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:740$1662_EN[7:0]$1671 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:740$1662_EN[7:0]$1671 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:740$1662_EN[7:0]$1671 [0] }
    Consolidated identical input bits for $mux cell $flatten\DUT.\rf.$procmux$1788:
      Old ports: A=8'11111111, B=8'00000000, Y=$flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:739$1661_EN[7:0]$1670
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:739$1661_EN[7:0]$1670 [0]
      New connections: $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:739$1661_EN[7:0]$1670 [7:1] = { $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:739$1661_EN[7:0]$1670 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:739$1661_EN[7:0]$1670 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:739$1661_EN[7:0]$1670 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:739$1661_EN[7:0]$1670 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:739$1661_EN[7:0]$1670 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:739$1661_EN[7:0]$1670 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:739$1661_EN[7:0]$1670 [0] }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4258: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4260: { $flatten\DUT.\Brain.$procmux$3180_CMP [1] $flatten\DUT.\Brain.$procmux$3178_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:422$1016_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4264: { $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4270: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4272: { $flatten\DUT.\Brain.$procmux$2696_CMP [0] $flatten\DUT.\Brain.$procmux$2568_CMP [0] $flatten\DUT.\Brain.$procmux$2567_CMP [0] $flatten\DUT.\Brain.$eq$i8008_core.sv:545$1024_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:403$1015_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4274: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4276: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4278: { $flatten\DUT.\Brain.$procmux$2148_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1051_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1047_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1046_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1035_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1031_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1030_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4280: { $flatten\DUT.\Brain.$procmux$2696_CMP [0] $flatten\DUT.\Brain.$procmux$2568_CMP [1:0] $flatten\DUT.\Brain.$procmux$2567_CMP $flatten\DUT.\Brain.$procmux$2148_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1051_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1047_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1046_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1035_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1031_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1030_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:545$1024_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:403$1015_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4282: { $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4284: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4286: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4288: { $flatten\DUT.\Brain.$procmux$3180_CMP [1] $flatten\DUT.\Brain.$procmux$3179_CMP $flatten\DUT.\Brain.$procmux$3178_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:422$1016_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4290: { $flatten\DUT.\Brain.$procmux$2696_CMP [0] $flatten\DUT.\Brain.$procmux$2568_CMP [0] $flatten\DUT.\Brain.$procmux$2567_CMP [0] $flatten\DUT.\Brain.$eq$i8008_core.sv:545$1024_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:403$1015_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4292: { $flatten\DUT.\Brain.$procmux$3179_CMP $flatten\DUT.\Brain.$procmux$3178_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:319$1001_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4294: { $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4296: { $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4298: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4300: { $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1051_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1047_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1046_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1035_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1031_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1030_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4302: { $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4304: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4306: { $flatten\DUT.\Brain.$procmux$2696_CMP [0] $flatten\DUT.\Brain.$procmux$2568_CMP [1:0] $flatten\DUT.\Brain.$procmux$2567_CMP $flatten\DUT.\Brain.$procmux$2148_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1051_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1047_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1046_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1035_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1031_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1030_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:545$1024_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:403$1015_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4308: { $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4310: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4312: { $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4314: { $flatten\DUT.\Brain.$procmux$2568_CMP [1:0] $flatten\DUT.\Brain.$procmux$2567_CMP $flatten\DUT.\Brain.$procmux$2148_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1051_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1047_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1046_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1035_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1031_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1030_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:403$1015_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4316: { $flatten\DUT.\Brain.$procmux$3179_CMP $flatten\DUT.\Brain.$procmux$3178_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:319$1001_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4318: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4320: { $flatten\DUT.\Brain.$procmux$2696_CMP [0] $flatten\DUT.\Brain.$procmux$2568_CMP [1] $flatten\DUT.\Brain.$procmux$2567_CMP [1] $flatten\DUT.\Brain.$procmux$2148_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1051_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1047_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1046_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1035_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1031_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1030_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:545$1024_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4322: { $flatten\DUT.\Brain.$procmux$3180_CMP [1] $flatten\DUT.\Brain.$procmux$3179_CMP $flatten\DUT.\Brain.$procmux$3178_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:422$1016_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4324: { $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4326: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2065_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4328: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4330: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2065_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4332: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4334: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4336: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4338: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4340: { $flatten\DUT.\Brain.$procmux$2568_CMP [1:0] $flatten\DUT.\Brain.$procmux$2567_CMP $flatten\DUT.\Brain.$procmux$2148_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1051_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1047_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1046_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1035_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1031_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1030_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:403$1015_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4342: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4344: { $flatten\DUT.\Brain.$procmux$3180_CMP [1] $flatten\DUT.\Brain.$procmux$3178_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:422$1016_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4346: { $flatten\DUT.\Brain.$procmux$3180_CMP [1] $flatten\DUT.\Brain.$procmux$3179_CMP $flatten\DUT.\Brain.$procmux$3178_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:422$1016_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4348: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4350: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2065_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4352: { $flatten\DUT.\Brain.$procmux$2148_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1051_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1047_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1046_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1035_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1031_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1030_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4354: { $flatten\DUT.\Brain.$procmux$2696_CMP [0] $flatten\DUT.\Brain.$procmux$2568_CMP [1] $flatten\DUT.\Brain.$procmux$2567_CMP [1] $flatten\DUT.\Brain.$procmux$2148_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1051_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1047_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1046_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1035_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1031_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1030_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:545$1024_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4356: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4358: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2065_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4360: { $flatten\DUT.\Brain.$procmux$2696_CMP [0] $flatten\DUT.\Brain.$procmux$2568_CMP [1] $flatten\DUT.\Brain.$procmux$2567_CMP [1] $flatten\DUT.\Brain.$procmux$2148_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1051_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1047_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1046_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1035_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1031_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1030_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:545$1024_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4362: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4364: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4366: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4368: { $flatten\DUT.\Brain.$procmux$2696_CMP [0] $flatten\DUT.\Brain.$procmux$2568_CMP [1:0] $flatten\DUT.\Brain.$procmux$2567_CMP $flatten\DUT.\Brain.$procmux$2148_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1051_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1047_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1046_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1035_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1031_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1030_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:545$1024_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:403$1015_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4370: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4372: { $flatten\DUT.\Brain.$procmux$3180_CMP [1] $flatten\DUT.\Brain.$procmux$3179_CMP $flatten\DUT.\Brain.$procmux$3178_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:422$1016_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4374: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4376: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4378: { $flatten\DUT.\Brain.$procmux$3179_CMP $flatten\DUT.\Brain.$procmux$3178_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4380: { $flatten\DUT.\Brain.$procmux$3180_CMP [1] $flatten\DUT.\Brain.$eq$i8008_core.sv:422$1016_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:319$1001_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4382: { $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1051_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1047_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1046_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1035_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1031_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1030_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4384: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4386: { $flatten\DUT.\Brain.$procmux$2696_CMP [0] $flatten\DUT.\Brain.$procmux$2568_CMP [1] $flatten\DUT.\Brain.$procmux$2567_CMP [1] $flatten\DUT.\Brain.$procmux$2148_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1051_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1047_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1046_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1035_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1031_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1030_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:545$1024_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4388: { $flatten\DUT.\Brain.$procmux$3180_CMP [1] $flatten\DUT.\Brain.$procmux$3179_CMP $flatten\DUT.\Brain.$procmux$3178_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:422$1016_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4390: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4392: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4394: { $flatten\DUT.\Brain.$procmux$2568_CMP [1:0] $flatten\DUT.\Brain.$procmux$2567_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:545$1024_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4396: { $flatten\DUT.\Brain.$procmux$2696_CMP [0] $flatten\DUT.\Brain.$procmux$2568_CMP [0] $flatten\DUT.\Brain.$procmux$2567_CMP [0] $flatten\DUT.\Brain.$eq$i8008_core.sv:545$1024_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:403$1015_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4398: { $flatten\DUT.\Brain.$procmux$3179_CMP $flatten\DUT.\Brain.$procmux$3178_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:319$1001_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4400: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4402: { $flatten\DUT.\Brain.$procmux$2148_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1051_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1047_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1046_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1035_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1031_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1030_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4408: { $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4410: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4412: { $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4416: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4418: { $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4424: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4426: { $flatten\DUT.\Brain.$procmux$2568_CMP [1:0] $flatten\DUT.\Brain.$procmux$2567_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:545$1024_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4428: { $flatten\DUT.\Brain.$procmux$3180_CMP [1] $flatten\DUT.\Brain.$procmux$3178_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:422$1016_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4430: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4432: { $flatten\DUT.\Brain.$procmux$3180_CMP [1] $flatten\DUT.\Brain.$procmux$3179_CMP $flatten\DUT.\Brain.$procmux$3178_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:422$1016_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4434: { $flatten\DUT.\Brain.$procmux$2696_CMP [0] $flatten\DUT.\Brain.$procmux$2148_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1051_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1047_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:677$1046_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1035_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1031_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:668$1030_Y $flatten\DUT.\Brain.$eq$i8008_core.sv:403$1015_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4436: { $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $flatten\DUT.\Stack.$procmux$1886:
      Old ports: A=$flatten\DUT.\Stack.$4$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1650, B=14'00000000000000, Y=$flatten\DUT.\Stack.$procmux$1886_Y
      New ports: A=$flatten\DUT.\Stack.$procmux$1811_Y [0], B=1'0, Y=$flatten\DUT.\Stack.$procmux$1886_Y [0]
      New connections: $flatten\DUT.\Stack.$procmux$1886_Y [13:1] = { $flatten\DUT.\Stack.$procmux$1886_Y [0] $flatten\DUT.\Stack.$procmux$1886_Y [0] $flatten\DUT.\Stack.$procmux$1886_Y [0] $flatten\DUT.\Stack.$procmux$1886_Y [0] $flatten\DUT.\Stack.$procmux$1886_Y [0] $flatten\DUT.\Stack.$procmux$1886_Y [0] $flatten\DUT.\Stack.$procmux$1886_Y [0] $flatten\DUT.\Stack.$procmux$1886_Y [0] $flatten\DUT.\Stack.$procmux$1886_Y [0] $flatten\DUT.\Stack.$procmux$1886_Y [0] $flatten\DUT.\Stack.$procmux$1886_Y [0] $flatten\DUT.\Stack.$procmux$1886_Y [0] $flatten\DUT.\Stack.$procmux$1886_Y [0] }
    Consolidated identical input bits for $mux cell $flatten\DUT.\Stack.$procmux$1964:
      Old ports: A=$flatten\DUT.\Stack.$3$memwr$\rf$i8008_core.sv:793$1585_EN[13:0]$1642, B=14'00000000000000, Y=$flatten\DUT.\Stack.$procmux$1964_Y
      New ports: A=$flatten\DUT.\Stack.$procmux$1859_Y [8], B=1'0, Y=$flatten\DUT.\Stack.$procmux$1964_Y [8]
      New connections: { $flatten\DUT.\Stack.$procmux$1964_Y [13:9] $flatten\DUT.\Stack.$procmux$1964_Y [7:0] } = { $flatten\DUT.\Stack.$procmux$1964_Y [8] $flatten\DUT.\Stack.$procmux$1964_Y [8] $flatten\DUT.\Stack.$procmux$1964_Y [8] $flatten\DUT.\Stack.$procmux$1964_Y [8] $flatten\DUT.\Stack.$procmux$1964_Y [8] 8'00000000 }
    Consolidated identical input bits for $mux cell $flatten\DUT.\Stack.$procmux$2027:
      Old ports: A=14'00000000000000, B=$flatten\DUT.\Stack.$2$memwr$\rf$i8008_core.sv:791$1584_EN[13:0]$1629, Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:791$1584_EN[13:0]$1600
      New ports: A=1'0, B=$flatten\DUT.\Stack.$procmux$1922_Y [0], Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:791$1584_EN[13:0]$1600 [0]
      New connections: $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:791$1584_EN[13:0]$1600 [13:1] = { $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:791$1584_EN[13:0]$1600 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:791$1584_EN[13:0]$1600 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:791$1584_EN[13:0]$1600 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:791$1584_EN[13:0]$1600 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:791$1584_EN[13:0]$1600 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:791$1584_EN[13:0]$1600 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:791$1584_EN[13:0]$1600 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:791$1584_EN[13:0]$1600 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:791$1584_EN[13:0]$1600 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:791$1584_EN[13:0]$1600 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:791$1584_EN[13:0]$1600 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:791$1584_EN[13:0]$1600 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:791$1584_EN[13:0]$1600 [0] }
    Consolidated identical input bits for $mux cell $flatten\DUT.\rf.$procmux$1791:
      Old ports: A=8'00000000, B=$flatten\DUT.\rf.$2$memwr$\rf$i8008_core.sv:748$1668_EN[7:0]$1692, Y=$flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:748$1668_EN[7:0]$1679
      New ports: A=1'0, B=$flatten\DUT.\rf.$procmux$1752_Y [0], Y=$flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:748$1668_EN[7:0]$1679 [0]
      New connections: $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:748$1668_EN[7:0]$1679 [7:1] = { $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:748$1668_EN[7:0]$1679 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:748$1668_EN[7:0]$1679 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:748$1668_EN[7:0]$1679 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:748$1668_EN[7:0]$1679 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:748$1668_EN[7:0]$1679 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:748$1668_EN[7:0]$1679 [0] $flatten\DUT.\rf.$0$memwr$\rf$i8008_core.sv:748$1668_EN[7:0]$1679 [0] }
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $flatten\DUT.\Stack.$procmux$1940:
      Old ports: A=$flatten\DUT.\Stack.$3$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1646, B=14'00000000000000, Y=$flatten\DUT.\Stack.$procmux$1940_Y
      New ports: A=$flatten\DUT.\Stack.$procmux$1886_Y [0], B=1'0, Y=$flatten\DUT.\Stack.$procmux$1940_Y [0]
      New connections: $flatten\DUT.\Stack.$procmux$1940_Y [13:1] = { $flatten\DUT.\Stack.$procmux$1940_Y [0] $flatten\DUT.\Stack.$procmux$1940_Y [0] $flatten\DUT.\Stack.$procmux$1940_Y [0] $flatten\DUT.\Stack.$procmux$1940_Y [0] $flatten\DUT.\Stack.$procmux$1940_Y [0] $flatten\DUT.\Stack.$procmux$1940_Y [0] $flatten\DUT.\Stack.$procmux$1940_Y [0] $flatten\DUT.\Stack.$procmux$1940_Y [0] $flatten\DUT.\Stack.$procmux$1940_Y [0] $flatten\DUT.\Stack.$procmux$1940_Y [0] $flatten\DUT.\Stack.$procmux$1940_Y [0] $flatten\DUT.\Stack.$procmux$1940_Y [0] $flatten\DUT.\Stack.$procmux$1940_Y [0] }
    Consolidated identical input bits for $mux cell $flatten\DUT.\Stack.$procmux$2018:
      Old ports: A=14'00000000000000, B=$flatten\DUT.\Stack.$2$memwr$\rf$i8008_core.sv:793$1585_EN[13:0]$1632, Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:793$1585_EN[13:0]$1603
      New ports: A=1'0, B=$flatten\DUT.\Stack.$procmux$1964_Y [8], Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:793$1585_EN[13:0]$1603 [8]
      New connections: { $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:793$1585_EN[13:0]$1603 [13:9] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:793$1585_EN[13:0]$1603 [7:0] } = { $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:793$1585_EN[13:0]$1603 [8] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:793$1585_EN[13:0]$1603 [8] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:793$1585_EN[13:0]$1603 [8] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:793$1585_EN[13:0]$1603 [8] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:793$1585_EN[13:0]$1603 [8] 8'00000000 }
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $flatten\DUT.\Stack.$procmux$2006:
      Old ports: A=14'00000000000000, B=$flatten\DUT.\Stack.$2$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1636, Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1607
      New ports: A=1'0, B=$flatten\DUT.\Stack.$procmux$1940_Y [0], Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1607 [0]
      New connections: $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1607 [13:1] = { $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1607 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1607 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1607 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1607 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1607 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1607 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1607 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1607 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1607 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1607 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1607 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1607 [0] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:795$1587_EN[13:0]$1607 [0] }
  Optimizing cells in module \top.
Performed a total of 192 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~336 debug messages>
Removed a total of 112 cells.

3.10.6. Executing OPT_DFF pass (perform DFF optimizations).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 1487 unused wires.
<suppressed ~2 debug messages>

3.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.10.9. Rerunning OPT passes. (Maybe there is more to do..)

3.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~60 debug messages>

3.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2123: { $auto$opt_reduce.cc:134:opt_pmux$4439 $flatten\DUT.\Brain.$procmux$2066_CTRL $auto$opt_reduce.cc:134:opt_pmux$4267 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2463: { $auto$opt_reduce.cc:134:opt_pmux$4441 $auto$opt_reduce.cc:134:opt_pmux$4297 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2473: { $flatten\DUT.\Brain.$procmux$2069_CTRL $auto$opt_reduce.cc:134:opt_pmux$4443 $flatten\DUT.\Brain.$procmux$2066_CTRL $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2503: { $auto$opt_reduce.cc:134:opt_pmux$4445 $auto$opt_reduce.cc:134:opt_pmux$4297 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2626: { $auto$opt_reduce.cc:134:opt_pmux$4447 $auto$opt_reduce.cc:134:opt_pmux$4297 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2715: { $auto$opt_reduce.cc:134:opt_pmux$4449 $flatten\DUT.\Brain.$procmux$2066_CTRL $flatten\DUT.\Brain.$procmux$2065_CMP $auto$opt_reduce.cc:134:opt_pmux$4269 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2977: { $auto$opt_reduce.cc:134:opt_pmux$4451 $auto$opt_reduce.cc:134:opt_pmux$4297 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2988: { $flatten\DUT.\Brain.$procmux$2069_CTRL $auto$opt_reduce.cc:134:opt_pmux$4453 $flatten\DUT.\Brain.$procmux$2066_CTRL $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3870: { $flatten\DUT.\Brain.$procmux$2069_CTRL $auto$opt_reduce.cc:134:opt_pmux$4455 $flatten\DUT.\Brain.$procmux$2066_CTRL $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4438: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4440: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4444: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4446: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4448: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$4450: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2068_CMP }
  Optimizing cells in module \top.
Performed a total of 15 changes.

3.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

3.10.13. Executing OPT_DFF pass (perform DFF optimizations).

3.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

3.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.10.16. Rerunning OPT passes. (Maybe there is more to do..)

3.10.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~60 debug messages>

3.10.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.10.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.10.20. Executing OPT_DFF pass (perform DFF optimizations).

3.10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.10.23. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register top.DUT.Brain.cycle.
Not marking top.DUT.Brain.state as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\DUT.Brain.cycle' from module `\top'.
  found $dff cell for state register: $flatten\DUT.\Brain.$procdff$4236
  root of input selection tree: $flatten\DUT.\Brain.$0\cycle[1:0]
  found reset state: 2'00 (guessed from mux tree)
  found ctrl input: \reset_n
  found state code: 2'00
  found ctrl input: $flatten\DUT.\Brain.$procmux$2043_CMP
  found ctrl input: $flatten\DUT.\Brain.$procmux$2044_CMP
  found ctrl input: $flatten\DUT.\Brain.$procmux$2045_CMP
  found ctrl input: $flatten\DUT.\Brain.$procmux$2051_CMP
  found ctrl input: $auto$opt_reduce.cc:134:opt_pmux$4331
  found ctrl input: $flatten\DUT.\Brain.$procmux$2066_CTRL
  found ctrl input: $flatten\DUT.\Brain.$procmux$2183_CTRL
  found ctrl input: $flatten\DUT.\Brain.$procmux$2210_CTRL
  found ctrl input: $flatten\DUT.\Brain.$procmux$2148_CMP
  found ctrl input: \DUT.Brain.CF
  found ctrl input: $auto$opt_reduce.cc:134:opt_pmux$4279
  found ctrl input: $flatten\DUT.\Brain.$procmux$2696_CTRL
  found state code: 2'10
  found ctrl input: $flatten\DUT.\Brain.$procmux$2065_CMP
  found ctrl input: $auto$opt_reduce.cc:134:opt_pmux$4329
  found ctrl input: $flatten\DUT.\Brain.$eq$i8008_core.sv:403$1015_Y
  found state code: 2'01
  found ctrl input: $flatten\DUT.\Brain.$procmux$3652_CTRL
  found ctrl input: $flatten\DUT.\Brain.$procmux$3534_CTRL
  found ctrl input: $flatten\DUT.\Brain.$procmux$3623_CTRL
  found ctrl input: $flatten\DUT.\Brain.$or$i8008_core.sv:342$1007_Y
  found ctrl input: \DUT.Intr
  found ctrl output: $flatten\DUT.\Brain.$procmux$2043_CMP
  found ctrl output: $flatten\DUT.\Brain.$procmux$2044_CMP
  found ctrl output: $flatten\DUT.\Brain.$procmux$2045_CMP
  ctrl inputs: { $auto$opt_reduce.cc:134:opt_pmux$4331 $auto$opt_reduce.cc:134:opt_pmux$4279 $auto$opt_reduce.cc:134:opt_pmux$4329 \DUT.Intr $flatten\DUT.\Brain.$procmux$3652_CTRL $flatten\DUT.\Brain.$procmux$3623_CTRL $flatten\DUT.\Brain.$procmux$3534_CTRL $flatten\DUT.\Brain.$procmux$2696_CTRL $flatten\DUT.\Brain.$procmux$2210_CTRL $flatten\DUT.\Brain.$procmux$2183_CTRL $flatten\DUT.\Brain.$procmux$2148_CMP $flatten\DUT.\Brain.$procmux$2066_CTRL $flatten\DUT.\Brain.$procmux$2065_CMP $flatten\DUT.\Brain.$procmux$2051_CMP $flatten\DUT.\Brain.$eq$i8008_core.sv:403$1015_Y $flatten\DUT.\Brain.$or$i8008_core.sv:342$1007_Y \DUT.Brain.CF \reset_n }
  ctrl outputs: { $flatten\DUT.\Brain.$procmux$2045_CMP $flatten\DUT.\Brain.$procmux$2044_CMP $flatten\DUT.\Brain.$procmux$2043_CMP $flatten\DUT.\Brain.$0\cycle[1:0] }
  transition:       2'00 18'-----------------0 ->       2'00 5'10000
  transition:       2'00 18'--0--------000---1 -> INVALID_STATE(2'x) 5'100xx  <ignored invalid transition!>
  transition:       2'00 18'--1--------------1 ->       2'00 5'10000
  transition:       2'00 18'----000----1-----1 ->       2'00 5'10000
  transition:       2'00 18'---0-1-----1-----1 ->       2'00 5'10000
  transition:       2'00 18'---1-1-----1-----1 ->       2'00 5'10000
  transition:       2'00 18'------1----1---0-1 ->       2'00 5'10000
  transition:       2'00 18'------1----1---1-1 ->       2'00 5'10000
  transition:       2'00 18'----1------1-----1 ->       2'01 5'10001
  transition:       2'00 18'------------1-0--1 ->       2'00 5'10000
  transition:       2'00 18'------------1-1--1 ->       2'01 5'10001
  transition:       2'00 18'-------------1---1 ->       2'00 5'10000
  transition:       2'10 18'-----------------0 ->       2'00 5'00100
  transition:       2'10 18'0----------0-0---1 -> INVALID_STATE(2'x) 5'001xx  <ignored invalid transition!>
  transition:       2'10 18'--------0001-----1 ->       2'10 5'00110
  transition:       2'10 18'----------11-----1 ->       2'00 5'00100
  transition:       2'10 18'--------1--1----01 ->       2'00 5'00100
  transition:       2'10 18'--------1--1----11 ->       2'10 5'00110
  transition:       2'10 18'---------1-1----01 ->       2'10 5'00110
  transition:       2'10 18'---------1-1----11 ->       2'00 5'00100
  transition:       2'10 18'1----------------1 ->       2'10 5'00110
  transition:       2'10 18'-------------1---1 ->       2'00 5'00100
  transition:       2'01 18'-----------------0 ->       2'00 5'01000
  transition:       2'01 18'0----------0-0---1 -> INVALID_STATE(2'x) 5'010xx  <ignored invalid transition!>
  transition:       2'01 18'-0-----0---1-----1 ->       2'01 5'01001
  transition:       2'01 18'-------1---1-----1 ->       2'00 5'01000
  transition:       2'01 18'-1---------1-----1 ->       2'10 5'01010
  transition:       2'01 18'1----------------1 ->       2'01 5'01001
  transition:       2'01 18'-------------1---1 ->       2'00 5'01000

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\DUT.Brain.cycle$4456' from module `\top'.
  Merging pattern 18'------1----1---0-1 and 18'------1----1---1-1 from group (0 0 5'10000).
  Merging pattern 18'------1----1---1-1 and 18'------1----1---0-1 from group (0 0 5'10000).
  Merging pattern 18'---0-1-----1-----1 and 18'---1-1-----1-----1 from group (0 0 5'10000).
  Merging pattern 18'---1-1-----1-----1 and 18'---0-1-----1-----1 from group (0 0 5'10000).
  Removing unused input signal \DUT.Intr.
  Removing unused input signal $flatten\DUT.\Brain.$or$i8008_core.sv:342$1007_Y.

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 17 unused cells and 17 unused wires.
<suppressed ~19 debug messages>

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\DUT.Brain.cycle$4456' from module `\top'.
  Removing unused output signal $flatten\DUT.\Brain.$0\cycle[1:0] [0].
  Removing unused output signal $flatten\DUT.\Brain.$0\cycle[1:0] [1].

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\DUT.Brain.cycle$4456' from module `\top' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00 -> --1
  10 -> -1-
  01 -> 1--

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\DUT.Brain.cycle$4456' from module `top':
-------------------------------------

  Information on FSM $fsm$\DUT.Brain.cycle$4456 (\DUT.Brain.cycle):

  Number of input signals:   16
  Number of output signals:   3
  Number of state bits:       3

  Input signals:
    0: \reset_n
    1: \DUT.Brain.CF
    2: $flatten\DUT.\Brain.$eq$i8008_core.sv:403$1015_Y
    3: $flatten\DUT.\Brain.$procmux$2051_CMP
    4: $flatten\DUT.\Brain.$procmux$2065_CMP
    5: $flatten\DUT.\Brain.$procmux$2066_CTRL
    6: $flatten\DUT.\Brain.$procmux$2148_CMP
    7: $flatten\DUT.\Brain.$procmux$2183_CTRL
    8: $flatten\DUT.\Brain.$procmux$2210_CTRL
    9: $flatten\DUT.\Brain.$procmux$2696_CTRL
   10: $flatten\DUT.\Brain.$procmux$3534_CTRL
   11: $flatten\DUT.\Brain.$procmux$3623_CTRL
   12: $flatten\DUT.\Brain.$procmux$3652_CTRL
   13: $auto$opt_reduce.cc:134:opt_pmux$4329
   14: $auto$opt_reduce.cc:134:opt_pmux$4279
   15: $auto$opt_reduce.cc:134:opt_pmux$4331

  Output signals:
    0: $flatten\DUT.\Brain.$procmux$2043_CMP
    1: $flatten\DUT.\Brain.$procmux$2044_CMP
    2: $flatten\DUT.\Brain.$procmux$2045_CMP

  State encoding:
    0:      3'--1  <RESET STATE>
    1:      3'-1-
    2:      3'1--

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 16'---------------0   ->     0 3'100
      1:     0 16'-----------1-0-1   ->     0 3'100
      2:     0 16'------------1--1   ->     0 3'100
      3:     0 16'---000----1----1   ->     0 3'100
      4:     0 16'-----1----1----1   ->     0 3'100
      5:     0 16'----1-----1----1   ->     0 3'100
      6:     0 16'--1------------1   ->     0 3'100
      7:     0 16'-----------1-1-1   ->     2 3'100
      8:     0 16'---1------1----1   ->     2 3'100
      9:     1 16'---------------0   ->     0 3'001
     10:     1 16'-------1--1---01   ->     0 3'001
     11:     1 16'--------1-1---11   ->     0 3'001
     12:     1 16'------------1--1   ->     0 3'001
     13:     1 16'---------11----1   ->     0 3'001
     14:     1 16'--------1-1---01   ->     1 3'001
     15:     1 16'-------1--1---11   ->     1 3'001
     16:     1 16'-------0001----1   ->     1 3'001
     17:     1 16'1--------------1   ->     1 3'001
     18:     2 16'---------------0   ->     0 3'010
     19:     2 16'------------1--1   ->     0 3'010
     20:     2 16'------1---1----1   ->     0 3'010
     21:     2 16'-1--------1----1   ->     1 3'010
     22:     2 16'-0----0---1----1   ->     2 3'010
     23:     2 16'1--------------1   ->     2 3'010

-------------------------------------

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\DUT.Brain.cycle$4456' from module `\top'.

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

3.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

3.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.12.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $flatten\DUT.\regB.$procdff$4205 ($dff) from module top (D = $flatten\DUT.\regB.$procmux$1746_Y, Q = \DUT.regB.Q, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$4544 ($sdff) from module top (D = \DUT.Stack.bus, Q = \DUT.regB.Q).
Adding SRST signal on $flatten\DUT.\regA.$procdff$4205 ($dff) from module top (D = $flatten\DUT.\regA.$procmux$1746_Y, Q = \DUT.regA.Q, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$4546 ($sdff) from module top (D = \DUT.Stack.bus, Q = \DUT.regA.Q).
Adding SRST signal on $flatten\DUT.\Unit.\flag_reg.$procdff$4204 ($dff) from module top (D = $flatten\DUT.\Unit.\flag_reg.$procmux$1741_Y, Q = \DUT.Unit.flag_reg.Q, rval = 4'0000).
Adding EN signal on $auto$ff.cc:266:slice$4548 ($sdff) from module top (D = { $flatten\DUT.\Unit.$ternary$i8008_core.sv:253$992_Y $flatten\DUT.\Unit.$or$i8008_core.sv:251$981_Y $flatten\DUT.\Unit.$or$i8008_core.sv:252$985_Y }, Q = \DUT.Unit.flag_reg.Q [2:0]).
Adding EN signal on $auto$ff.cc:266:slice$4548 ($sdff) from module top (D = \DUT.Unit.flag_reg.d [3], Q = \DUT.Unit.flag_reg.Q [3]).
Adding SRST signal on $flatten\DUT.\SP_SEL.$procdff$4216 ($dff) from module top (D = $flatten\DUT.\SP_SEL.$procmux$1802_Y, Q = \DUT.SP_SEL.Q, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$4555 ($sdff) from module top (D = $flatten\DUT.\SP_SEL.$procmux$1802_Y, Q = \DUT.SP_SEL.Q).
Adding SRST signal on $flatten\DUT.\Brain.$procdff$4235 ($dff) from module top (D = \DUT.Brain.next_state, Q = \DUT.Brain.state, rval = 3'010).
Adding SRST signal on $flatten\DUT.$procdff$4238 ($dff) from module top (D = $flatten\DUT.$or$i8008_core.sv:103$1558_Y, Q = \DUT.Intr, rval = 1'0).

3.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 12 unused cells and 17 unused wires.
<suppressed ~13 debug messages>

3.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

3.12.9. Rerunning OPT passes. (Maybe there is more to do..)

3.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~57 debug messages>

3.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.12.13. Executing OPT_DFF pass (perform DFF optimizations).

3.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.12.16. Finished OPT passes. (There is nothing left to do.)

3.13. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from mux cell top.$flatten\DUT.\Brain.$ternary$i8008_core.sv:305$999 ($mux).
Removed top 2 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$eq$i8008_core.sv:319$1001 ($eq).
Removed top 2 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$eq$i8008_core.sv:342$1002 ($eq).
Removed top 3 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$eq$i8008_core.sv:342$1005 ($eq).
Removed top 2 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$eq$i8008_core.sv:422$1016 ($eq).
Removed top 2 bits (of 3) from mux cell top.$flatten\DUT.\Brain.$ternary$i8008_core.sv:422$1017 ($mux).
Removed top 1 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$eq$i8008_core.sv:545$1024 ($eq).
Removed top 1 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$eq$i8008_core.sv:668$1030 ($eq).
Removed top 1 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$eq$i8008_core.sv:668$1031 ($eq).
Removed top 1 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$eq$i8008_core.sv:668$1035 ($eq).
Removed top 1 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$eq$i8008_core.sv:677$1046 ($eq).
Removed top 1 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$eq$i8008_core.sv:677$1047 ($eq).
Removed top 1 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$eq$i8008_core.sv:677$1051 ($eq).
Removed top 3 bits (of 5) from port B of cell top.$auto$fsm_map.cc:77:implement_pattern_cache$4490 ($eq).
Removed top 2 bits (of 3) from port B of cell top.$flatten\DUT.\Brain.$procmux$2066_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\DUT.\Brain.$procmux$2066_CMP1 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\DUT.\Brain.$procmux$2069_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$procmux$2148_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell top.$auto$fsm_map.cc:77:implement_pattern_cache$4515 ($eq).
Removed top 2 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$procmux$2568_CMP1 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$auto$fsm_map.cc:77:implement_pattern_cache$4532 ($eq).
Removed top 1 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$procmux$2696_CMP0 ($eq).
Removed top 6 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$procmux$3178_CMP0 ($eq).
Removed top 4 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$procmux$3178_CMP1 ($eq).
Removed top 3 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$procmux$3178_CMP2 ($eq).
Removed top 3 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$procmux$3178_CMP3 ($eq).
Removed top 2 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$procmux$3180_CMP1 ($eq).
Removed top 2 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$procmux$3535_CMP0 ($eq).
Removed top 7 bits (of 8) from port B of cell top.$flatten\DUT.\Brain.$procmux$3623_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell top.$flatten\DUT.\Brain.$procmux$4016_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell top.$flatten\DUT.\Stack.$add$i8008_core.sv:795$1652 ($add).
Removed top 18 bits (of 32) from port Y of cell top.$flatten\DUT.\Stack.$add$i8008_core.sv:795$1652 ($add).
Removed top 31 bits (of 32) from port B of cell top.$flatten\DUT.\SP_SEL.$add$i8008_core.sv:844$1657 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\DUT.\SP_SEL.$add$i8008_core.sv:844$1657 ($add).
Removed top 31 bits (of 32) from port B of cell top.$flatten\DUT.\SP_SEL.$sub$i8008_core.sv:846$1660 ($sub).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\DUT.\SP_SEL.$sub$i8008_core.sv:846$1660 ($sub).
Removed top 31 bits (of 32) from port B of cell top.$flatten\DUT.\Unit.$add$i8008_core.sv:216$967 ($add).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\DUT.\Unit.$add$i8008_core.sv:216$967 ($add).
Removed top 31 bits (of 32) from port B of cell top.$flatten\DUT.\Unit.$sub$i8008_core.sv:217$968 ($sub).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\DUT.\Unit.$sub$i8008_core.sv:217$968 ($sub).
Removed top 8 bits (of 9) from port B of cell top.$flatten\DUT.\Unit.$add$i8008_core.sv:240$972 ($add).
Removed top 8 bits (of 9) from port B of cell top.$flatten\DUT.\Unit.$sub$i8008_core.sv:242$976 ($sub).
Removed top 1 bits (of 3) from port B of cell top.$flatten\DUT.\Unit.$procmux$4023_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\DUT.\Unit.$procmux$4024_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell top.$flatten\DUT.\Unit.$procmux$4025_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\DUT.\Unit.$procmux$4057_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\DUT.\Unit.$procmux$4058_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell top.$flatten\DUT.\Unit.$procmux$4059_CMP0 ($eq).
Removed top 2 bits (of 3) from wire top.$flatten\DUT.\Brain.$ternary$i8008_core.sv:305$999_Y.
Removed top 2 bits (of 3) from wire top.$flatten\DUT.\Brain.$ternary$i8008_core.sv:422$1017_Y.
Removed top 29 bits (of 32) from wire top.$flatten\DUT.\SP_SEL.$add$i8008_core.sv:844$1657_Y.
Removed top 18 bits (of 32) from wire top.$flatten\DUT.\Stack.$add$i8008_core.sv:795$1652_Y.
Removed top 2 bits (of 12) from wire top.chip_inputs.

3.14. Executing PEEPOPT pass (run peephole optimizers).

3.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

3.16. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module top that may be considered for resource sharing.
  Analyzing resource sharing options for $flatten\DUT.\rf.$memrd$\rf$i8008_core.sv:752$1694 ($memrd):
    Found 1 activation_patterns using ctrl signal { \DUT.Brain.ctrl_signals [11] \DUT.Brain.ctrl_signals [5] }.
    No candidates found.
  Analyzing resource sharing options for $flatten\DUT.\Stack.$memrd$\rf$i8008_core.sv:795$1651 ($memrd):
    Found 2 activation_patterns using ctrl signal { $flatten\DUT.\Stack.$logic_and$i8008_core.sv:792$1639_Y $flatten\DUT.\Stack.$logic_and$i8008_core.sv:790$1626_Y \DUT.Brain.ctrl_signals [5] \DUT.Brain.ctrl_signals [3] \reset_n }.
    No candidates found.

3.17. Executing TECHMAP pass (map to technology primitives).

3.17.1. Executing Verilog-2005 frontend: /Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/cmp2lut.v
Parsing Verilog input from `/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.17.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

3.18. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.20. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $flatten\DUT.\SP_SEL.$add$i8008_core.sv:844$1657 ($add).
  creating $macc model for $flatten\DUT.\SP_SEL.$sub$i8008_core.sv:846$1660 ($sub).
  creating $macc model for $flatten\DUT.\Stack.$add$i8008_core.sv:795$1652 ($add).
  creating $macc model for $flatten\DUT.\Unit.$add$i8008_core.sv:216$967 ($add).
  creating $macc model for $flatten\DUT.\Unit.$add$i8008_core.sv:239$969 ($add).
  creating $macc model for $flatten\DUT.\Unit.$add$i8008_core.sv:240$972 ($add).
  creating $macc model for $flatten\DUT.\Unit.$sub$i8008_core.sv:217$968 ($sub).
  creating $macc model for $flatten\DUT.\Unit.$sub$i8008_core.sv:241$973 ($sub).
  creating $macc model for $flatten\DUT.\Unit.$sub$i8008_core.sv:242$976 ($sub).
  creating $alu model for $macc $flatten\DUT.\Unit.$sub$i8008_core.sv:242$976.
  creating $alu model for $macc $flatten\DUT.\Unit.$sub$i8008_core.sv:241$973.
  creating $alu model for $macc $flatten\DUT.\Unit.$sub$i8008_core.sv:217$968.
  creating $alu model for $macc $flatten\DUT.\Unit.$add$i8008_core.sv:240$972.
  creating $alu model for $macc $flatten\DUT.\Unit.$add$i8008_core.sv:239$969.
  creating $alu model for $macc $flatten\DUT.\Unit.$add$i8008_core.sv:216$967.
  creating $alu model for $macc $flatten\DUT.\Stack.$add$i8008_core.sv:795$1652.
  creating $alu model for $macc $flatten\DUT.\SP_SEL.$sub$i8008_core.sv:846$1660.
  creating $alu model for $macc $flatten\DUT.\SP_SEL.$add$i8008_core.sv:844$1657.
  creating $alu cell for $flatten\DUT.\SP_SEL.$add$i8008_core.sv:844$1657: $auto$alumacc.cc:485:replace_alu$4567
  creating $alu cell for $flatten\DUT.\SP_SEL.$sub$i8008_core.sv:846$1660: $auto$alumacc.cc:485:replace_alu$4570
  creating $alu cell for $flatten\DUT.\Stack.$add$i8008_core.sv:795$1652: $auto$alumacc.cc:485:replace_alu$4573
  creating $alu cell for $flatten\DUT.\Unit.$add$i8008_core.sv:216$967: $auto$alumacc.cc:485:replace_alu$4576
  creating $alu cell for $flatten\DUT.\Unit.$add$i8008_core.sv:239$969: $auto$alumacc.cc:485:replace_alu$4579
  creating $alu cell for $flatten\DUT.\Unit.$add$i8008_core.sv:240$972: $auto$alumacc.cc:485:replace_alu$4582
  creating $alu cell for $flatten\DUT.\Unit.$sub$i8008_core.sv:217$968: $auto$alumacc.cc:485:replace_alu$4585
  creating $alu cell for $flatten\DUT.\Unit.$sub$i8008_core.sv:241$973: $auto$alumacc.cc:485:replace_alu$4588
  creating $alu cell for $flatten\DUT.\Unit.$sub$i8008_core.sv:242$976: $auto$alumacc.cc:485:replace_alu$4591
  created 9 $alu and 0 $macc cells.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~57 debug messages>

3.21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.21.6. Executing OPT_DFF pass (perform DFF optimizations).

3.21.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.21.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.21.9. Finished OPT passes. (There is nothing left to do.)

3.22. Executing MEMORY pass.

3.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 8 transformations.

3.22.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 49 transformations.

3.22.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing top.DUT.Stack.rf write port 0.
  Analyzing top.DUT.Stack.rf write port 1.
  Analyzing top.DUT.Stack.rf write port 2.
  Analyzing top.DUT.Stack.rf write port 3.
  Analyzing top.DUT.Stack.rf write port 4.
  Analyzing top.DUT.Stack.rf write port 5.
  Analyzing top.DUT.Stack.rf write port 6.
  Analyzing top.DUT.Stack.rf write port 7.
  Analyzing top.DUT.Stack.rf write port 8.
  Analyzing top.DUT.Stack.rf write port 9.
  Analyzing top.DUT.Stack.rf write port 10.
  Analyzing top.DUT.rf.rf write port 0.
  Analyzing top.DUT.rf.rf write port 1.
  Analyzing top.DUT.rf.rf write port 2.
  Analyzing top.DUT.rf.rf write port 3.
  Analyzing top.DUT.rf.rf write port 4.
  Analyzing top.DUT.rf.rf write port 5.
  Analyzing top.DUT.rf.rf write port 6.
  Analyzing top.DUT.rf.rf write port 7.

3.22.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.22.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\DUT.Stack.rf'[0] in module `\top': no output FF found.
Checking read port `\DUT.rf.rf'[0] in module `\top': no output FF found.
Checking read port address `\DUT.Stack.rf'[0] in module `\top': merged address FF to cell.
Checking read port address `\DUT.rf.rf'[0] in module `\top': no address FF found.

3.22.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.22.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating write ports of memory top.DUT.Stack.rf by address:
  Merging ports 0, 1 (address 3'000).
  Merging ports 0, 2 (address 3'000).
  Merging ports 0, 3 (address 3'000).
  Merging ports 0, 4 (address 3'000).
  Merging ports 6, 7 (address 3'110).
  Merging ports 8, 9 (address \DUT.SP_SEL.Q).
  Merging ports 8, 10 (address \DUT.SP_SEL.Q).
Consolidating write ports of memory top.DUT.Stack.rf by address:
  Merging ports 1, 2 (address 3'101).
Consolidating write ports of memory top.DUT.Stack.rf by address:
Consolidating write ports of memory top.DUT.rf.rf by address:
  Merging ports 0, 1 (address 3'000).
  Merging ports 0, 2 (address 3'000).
  Merging ports 0, 3 (address 3'000).
  Merging ports 0, 4 (address 3'000).
Consolidating write ports of memory top.DUT.rf.rf by address:
Consolidating write ports of memory top.DUT.Stack.rf using sat-based resource sharing:
Consolidating write ports of memory top.DUT.rf.rf using sat-based resource sharing:
  Checking group clocked with posedge \clk100, width 8: ports 1, 2, 3.
  Common input cone for all EN signals: 32 cells.
  Size of unconstrained SAT problem: 241 variables, 715 clauses
  According to SAT solver sharing of port 1 with port 2 is not possible.
  Merging port 3 into port 1.

3.22.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.22.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 9 unused cells and 9 unused wires.
<suppressed ~10 debug messages>

3.22.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.24. Executing MEMORY_LIBMAP pass (mapping memories to cells).
using FF mapping for memory top.DUT.Stack.rf
using FF mapping for memory top.DUT.rf.rf
<suppressed ~12 debug messages>

3.25. Executing TECHMAP pass (map to technology primitives).

3.25.1. Executing Verilog-2005 frontend: /Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K_'.
Successfully finished Verilog frontend.

3.25.2. Executing Verilog-2005 frontend: /Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/spram_map.v
Parsing Verilog input from `/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/spram_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_SPRAM_'.
Successfully finished Verilog frontend.

3.25.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.26. Executing ICE40_BRAMINIT pass.

3.27. Executing OPT pass (performing simple optimizations).

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~132 debug messages>

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.27.3. Executing OPT_DFF pass (perform DFF optimizations).

3.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 18 unused cells and 55 unused wires.
<suppressed ~19 debug messages>

3.27.5. Finished fast OPT passes.

3.28. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \DUT.Stack.rf in module \top:
  created 8 $dff cells and 0 static cells of width 14.
Extracted addr FF from read port 0 of top.DUT.Stack.rf: $\DUT.Stack.rf$rdreg[0]
  read interface: 1 $dff and 7 $mux cells.
  write interface: 32 write mux blocks.
Mapping memory \DUT.rf.rf in module \top:
  created 8 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 7 $mux cells.
  write interface: 24 write mux blocks.

3.29. Executing OPT pass (performing simple optimizations).

3.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~93 debug messages>

3.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $auto$memory_share.cc:453:consolidate_wr_using_sat$4621: $auto$rtlil.cc:2403:ReduceOr$4615 -> 1'1
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~78 debug messages>

3.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2133: { $auto$opt_reduce.cc:134:opt_pmux$5047 $flatten\DUT.\Brain.$procmux$2051_CMP }
    Consolidated identical input bits for $mux cell $flatten\DUT.\Brain.$procmux$2193:
      Old ports: A=3'111, B=3'010, Y=$flatten\DUT.\Brain.$12\next_state[2:0]
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\Brain.$12\next_state[2:0] [0]
      New connections: $flatten\DUT.\Brain.$12\next_state[2:0] [2:1] = { $flatten\DUT.\Brain.$12\next_state[2:0] [0] 1'1 }
    Consolidated identical input bits for $mux cell $flatten\DUT.\Brain.$procmux$2221:
      Old ports: A=3'010, B=3'111, Y=$flatten\DUT.\Brain.$11\next_state[2:0]
      New ports: A=1'0, B=1'1, Y=$flatten\DUT.\Brain.$11\next_state[2:0] [0]
      New connections: $flatten\DUT.\Brain.$11\next_state[2:0] [2:1] = { $flatten\DUT.\Brain.$11\next_state[2:0] [0] 1'1 }
    Consolidated identical input bits for $mux cell $flatten\DUT.\Brain.$procmux$2355:
      Old ports: A=3'101, B=3'000, Y=$flatten\DUT.\Brain.$72\ctrl_signals[14:11] [3:1]
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\Brain.$72\ctrl_signals[14:11] [1]
      New connections: $flatten\DUT.\Brain.$72\ctrl_signals[14:11] [3:2] = { $flatten\DUT.\Brain.$72\ctrl_signals[14:11] [1] 1'0 }
    Consolidated identical input bits for $mux cell $flatten\DUT.\Brain.$procmux$2397:
      Old ports: A=2'11, B=2'01, Y=$flatten\DUT.\Brain.$66\ctrl_signals[1:0]
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\Brain.$66\ctrl_signals[1:0] [1]
      New connections: $flatten\DUT.\Brain.$66\ctrl_signals[1:0] [0] = 1'1
    Consolidated identical input bits for $mux cell $flatten\DUT.\Brain.$procmux$2539:
      Old ports: A=3'110, B=3'000, Y=$flatten\DUT.\Brain.$68\ctrl_signals[14:11] [3:1]
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\Brain.$68\ctrl_signals[14:11] [2]
      New connections: { $flatten\DUT.\Brain.$68\ctrl_signals[14:11] [3] $flatten\DUT.\Brain.$68\ctrl_signals[14:11] [1] } = { $flatten\DUT.\Brain.$68\ctrl_signals[14:11] [2] 1'0 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2647: { $auto$opt_reduce.cc:134:opt_pmux$5049 $flatten\DUT.\Brain.$procmux$2051_CMP }
    Consolidated identical input bits for $mux cell $flatten\DUT.\Brain.$procmux$2694:
      Old ports: A=3'111, B=3'010, Y=$flatten\DUT.\Brain.$8\next_state[2:0]
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\Brain.$8\next_state[2:0] [0]
      New connections: $flatten\DUT.\Brain.$8\next_state[2:0] [2:1] = { $flatten\DUT.\Brain.$8\next_state[2:0] [0] 1'1 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$2715: { $flatten\DUT.\Brain.$procmux$2065_CMP $auto$opt_reduce.cc:134:opt_pmux$5051 }
    Consolidated identical input bits for $mux cell $flatten\DUT.\Brain.$procmux$3027:
      Old ports: A=3'110, B=3'000, Y=$flatten\DUT.\Brain.$42\ctrl_signals[14:11] [3:1]
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\Brain.$42\ctrl_signals[14:11] [2]
      New connections: { $flatten\DUT.\Brain.$42\ctrl_signals[14:11] [3] $flatten\DUT.\Brain.$42\ctrl_signals[14:11] [1] } = { $flatten\DUT.\Brain.$42\ctrl_signals[14:11] [2] 1'0 }
    Consolidated identical input bits for $mux cell $flatten\DUT.\Brain.$procmux$3086:
      Old ports: A=3'101, B=3'000, Y=$flatten\DUT.\Brain.$47\ctrl_signals[14:11] [3:1]
      New ports: A=1'1, B=1'0, Y=$flatten\DUT.\Brain.$47\ctrl_signals[14:11] [1]
      New connections: $flatten\DUT.\Brain.$47\ctrl_signals[14:11] [3:2] = { $flatten\DUT.\Brain.$47\ctrl_signals[14:11] [1] 1'0 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3146: \DUT.Brain.cycle [2:1]
    Consolidated identical input bits for $mux cell $flatten\DUT.\Brain.$procmux$3203:
      Old ports: A={ 2'10 $auto$wreduce.cc:455:run$4562 [0] }, B=3'000, Y=$flatten\DUT.\Brain.$28\ctrl_signals[24:16] [4:2]
      New ports: A={ 1'1 $auto$wreduce.cc:455:run$4562 [0] }, B=2'00, Y={ $flatten\DUT.\Brain.$28\ctrl_signals[24:16] [4] $flatten\DUT.\Brain.$28\ctrl_signals[24:16] [2] }
      New connections: $flatten\DUT.\Brain.$28\ctrl_signals[24:16] [3] = 1'0
    Consolidated identical input bits for $mux cell $flatten\DUT.\Brain.$procmux$3345:
      Old ports: A=3'101, B=3'010, Y=$flatten\DUT.\Brain.$6\next_state[2:0]
      New ports: A=2'01, B=2'10, Y=$flatten\DUT.\Brain.$6\next_state[2:0] [1:0]
      New connections: $flatten\DUT.\Brain.$6\next_state[2:0] [2] = $flatten\DUT.\Brain.$6\next_state[2:0] [0]
    Consolidated identical input bits for $mux cell $flatten\DUT.\Brain.$procmux$3637:
      Old ports: A=3'011, B=3'110, Y=$flatten\DUT.\Brain.$4\next_state[2:0]
      New ports: A=2'01, B=2'10, Y={ $flatten\DUT.\Brain.$4\next_state[2:0] [2] $flatten\DUT.\Brain.$4\next_state[2:0] [0] }
      New connections: $flatten\DUT.\Brain.$4\next_state[2:0] [1] = 1'1
    Consolidated identical input bits for $mux cell $flatten\DUT.\Brain.$procmux$3811:
      Old ports: A=3'010, B=3'111, Y=$flatten\DUT.\Brain.$5\next_state[2:0]
      New ports: A=1'0, B=1'1, Y=$flatten\DUT.\Brain.$5\next_state[2:0] [0]
      New connections: $flatten\DUT.\Brain.$5\next_state[2:0] [2:1] = { $flatten\DUT.\Brain.$5\next_state[2:0] [0] 1'1 }
    New ctrl vector for $pmux cell $flatten\DUT.\Brain.$procmux$3988: \DUT.Brain.cycle [0]
    Consolidated identical input bits for $mux cell $flatten\DUT.\Brain.$ternary$i8008_core.sv:473$1019:
      Old ports: A=2'01, B=2'11, Y=$flatten\DUT.\Brain.$ternary$i8008_core.sv:473$1019_Y
      New ports: A=1'0, B=1'1, Y=$flatten\DUT.\Brain.$ternary$i8008_core.sv:473$1019_Y [1]
      New connections: $flatten\DUT.\Brain.$ternary$i8008_core.sv:473$1019_Y [0] = 1'1
    Consolidated identical input bits for $mux cell $flatten\DUT.\Stack.$ternary$i8008_core.sv:791$1637:
      Old ports: A=\DUT.Stack.bus, B={ 2'00 \DUT.Stack.bus [5:3] 3'000 }, Y=$flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:791$1584_DATA[13:0]$1599 [7:0]
      New ports: A={ \DUT.Stack.bus [7:6] \DUT.Stack.bus [2:0] }, B=5'00000, Y={ $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:791$1584_DATA[13:0]$1599 [7:6] $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:791$1584_DATA[13:0]$1599 [2:0] }
      New connections: $flatten\DUT.\Stack.$0$memwr$\rf$i8008_core.sv:791$1584_DATA[13:0]$1599 [5:3] = \DUT.Stack.bus [5:3]
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$5046: { $flatten\DUT.\Brain.$procmux$2068_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$5048: { $flatten\DUT.\Brain.$procmux$2069_CMP $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2065_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$5050: { $flatten\DUT.\Brain.$procmux$2067_CMP $flatten\DUT.\Brain.$procmux$2066_CMP $flatten\DUT.\Brain.$procmux$2051_CMP }
  Optimizing cells in module \top.
    Consolidated identical input bits for $pmux cell $flatten\DUT.\Brain.$procmux$2245:
      Old ports: A=3'111, B={ 3'010 $flatten\DUT.\Brain.$11\next_state[2:0] $flatten\DUT.\Brain.$12\next_state[2:0] }, Y=$flatten\DUT.\Brain.$10\next_state[2:0]
      New ports: A=1'1, B={ 1'0 $flatten\DUT.\Brain.$11\next_state[2:0] [0] $flatten\DUT.\Brain.$12\next_state[2:0] [0] }, Y=$flatten\DUT.\Brain.$10\next_state[2:0] [0]
      New connections: $flatten\DUT.\Brain.$10\next_state[2:0] [2:1] = { $flatten\DUT.\Brain.$10\next_state[2:0] [0] 1'1 }
    Consolidated identical input bits for $pmux cell $flatten\DUT.\Brain.$procmux$3651:
      Old ports: A=3'111, B={ $flatten\DUT.\Brain.$4\next_state[2:0] $flatten\DUT.\Brain.$5\next_state[2:0] 3'010 }, Y=$flatten\DUT.\Brain.$3\next_state[2:0]
      New ports: A=2'11, B={ $flatten\DUT.\Brain.$4\next_state[2:0] [2] $flatten\DUT.\Brain.$4\next_state[2:0] [0] $flatten\DUT.\Brain.$5\next_state[2:0] [0] $flatten\DUT.\Brain.$5\next_state[2:0] [0] 2'00 }, Y={ $flatten\DUT.\Brain.$3\next_state[2:0] [2] $flatten\DUT.\Brain.$3\next_state[2:0] [0] }
      New connections: $flatten\DUT.\Brain.$3\next_state[2:0] [1] = 1'1
    Consolidated identical input bits for $mux cell $flatten\DUT.\Brain.$procmux$3930:
      Old ports: A=9'000000000, B={ $auto$opt_reduce.cc:134:opt_pmux$4289 $flatten\DUT.\Brain.$28\ctrl_signals[24:16] [7:2] $auto$opt_reduce.cc:134:opt_pmux$4261 $flatten\DUT.\Brain.$28\ctrl_signals[24:16] [0] }, Y=$flatten\DUT.\Brain.$4\ctrl_signals[24:16]
      New ports: A=8'00000000, B={ $auto$opt_reduce.cc:134:opt_pmux$4289 $flatten\DUT.\Brain.$28\ctrl_signals[24:16] [7:4] $flatten\DUT.\Brain.$28\ctrl_signals[24:16] [2] $auto$opt_reduce.cc:134:opt_pmux$4261 $flatten\DUT.\Brain.$28\ctrl_signals[24:16] [0] }, Y={ $flatten\DUT.\Brain.$4\ctrl_signals[24:16] [8:4] $flatten\DUT.\Brain.$4\ctrl_signals[24:16] [2:0] }
      New connections: $flatten\DUT.\Brain.$4\ctrl_signals[24:16] [3] = 1'0
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $flatten\DUT.\Brain.$procmux$3120:
      Old ports: A=3'000, B=$flatten\DUT.\Brain.$4\ctrl_signals[24:16] [4:2], Y=\DUT.Unit.ALU_ctrl [5:3]
      New ports: A=2'00, B={ $flatten\DUT.\Brain.$4\ctrl_signals[24:16] [4] $flatten\DUT.\Brain.$4\ctrl_signals[24:16] [2] }, Y={ \DUT.Unit.ALU_ctrl [5] \DUT.Unit.ALU_ctrl [3] }
      New connections: \DUT.Unit.ALU_ctrl [4] = 1'0
  Optimizing cells in module \top.
Performed a total of 26 changes.

3.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

3.29.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $\DUT.Stack.rf$rdreg[0] ($dff) from module top (D = $auto$rtlil.cc:2496:Mux$4598, Q = $\DUT.Stack.rf$rdreg[0]$q, rval = 3'000).

3.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 112 unused wires.
<suppressed ~5 debug messages>

3.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~5 debug messages>

3.29.9. Rerunning OPT passes. (Maybe there is more to do..)

3.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/6 on $pmux $flatten\DUT.\Unit.$procmux$4067.
    dead port 2/6 on $pmux $flatten\DUT.\Unit.$procmux$4067.
Removed 2 multiplexer ports.
<suppressed ~79 debug messages>

3.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $pmux cell $flatten\DUT.\Brain.$procmux$2443:
      Old ports: A={ $flatten\DUT.\Brain.$66\ctrl_signals[1:0] [1] $flatten\DUT.\Brain.$66\ctrl_signals[1:0] [1] 1'0 $flatten\DUT.\Brain.$66\ctrl_signals[1:0] [1] }, B={ $flatten\DUT.\Brain.$66\ctrl_signals[1:0] [1] 1'0 $flatten\DUT.\Brain.$66\ctrl_signals[1:0] [1] $flatten\DUT.\Brain.$66\ctrl_signals[1:0] [1] 4'0000 }, Y=$flatten\DUT.\Brain.$62\ctrl_signals[14:11]
      New ports: A={ $flatten\DUT.\Brain.$66\ctrl_signals[1:0] [1] 1'0 $flatten\DUT.\Brain.$66\ctrl_signals[1:0] [1] }, B={ 1'0 $flatten\DUT.\Brain.$66\ctrl_signals[1:0] [1] $flatten\DUT.\Brain.$66\ctrl_signals[1:0] [1] 3'000 }, Y=$flatten\DUT.\Brain.$62\ctrl_signals[14:11] [2:0]
      New connections: $flatten\DUT.\Brain.$62\ctrl_signals[14:11] [3] = $flatten\DUT.\Brain.$62\ctrl_signals[14:11] [0]
  Optimizing cells in module \top.
Performed a total of 1 changes.

3.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.29.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\DUT.rf.rf[7]$4863 ($dff) from module top (D = $auto$rtlil.cc:2496:Mux$4619, Q = \DUT.rf.rf[7]).
Adding SRST signal on $memory\DUT.rf.rf[6]$4861 ($dff) from module top (D = $memory\DUT.rf.rf$wrmux[6][1][0]$y$5021, Q = \DUT.rf.rf[6], rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$5054 ($sdff) from module top (D = $auto$rtlil.cc:2496:Mux$4619, Q = \DUT.rf.rf[6]).
Adding EN signal on $memory\DUT.rf.rf[5]$4859 ($dff) from module top (D = $auto$rtlil.cc:2496:Mux$4619, Q = \DUT.rf.rf[5]).
Adding EN signal on $memory\DUT.rf.rf[4]$4857 ($dff) from module top (D = $memory\DUT.rf.rf$wrmux[4][1][0]$y$4985, Q = \DUT.rf.rf[4]).
Adding EN signal on $memory\DUT.rf.rf[3]$4855 ($dff) from module top (D = $memory\DUT.rf.rf$wrmux[3][1][0]$y$4965, Q = \DUT.rf.rf[3]).
Adding EN signal on $memory\DUT.rf.rf[2]$4853 ($dff) from module top (D = $memory\DUT.rf.rf$wrmux[2][1][0]$y$4947, Q = \DUT.rf.rf[2]).
Adding EN signal on $memory\DUT.rf.rf[1]$4851 ($dff) from module top (D = $memory\DUT.rf.rf$wrmux[1][1][0]$y$4925, Q = \DUT.rf.rf[1]).
Adding EN signal on $memory\DUT.rf.rf[0]$4849 ($dff) from module top (D = $memory\DUT.rf.rf$wrmux[0][1][0]$y$4903, Q = \DUT.rf.rf[0]).
Adding EN signal on $memory\DUT.Stack.rf[7]$4656 ($dff) from module top (D = $memory\DUT.Stack.rf$wrmux[7][2][0]$y$4844, Q = \DUT.Stack.rf[7] [7:0]).
Adding EN signal on $memory\DUT.Stack.rf[7]$4656 ($dff) from module top (D = $memory\DUT.Stack.rf$wrmux[7][2][8]$y$4848, Q = \DUT.Stack.rf[7] [13:8]).
Adding EN signal on $memory\DUT.Stack.rf[6]$4654 ($dff) from module top (D = $memory\DUT.Stack.rf$wrmux[6][2][8]$y$4830, Q = \DUT.Stack.rf[6] [13:8]).
Adding EN signal on $memory\DUT.Stack.rf[6]$4654 ($dff) from module top (D = $memory\DUT.Stack.rf$wrmux[6][2][0]$y$4826, Q = \DUT.Stack.rf[6] [7:0]).
Adding EN signal on $memory\DUT.Stack.rf[5]$4652 ($dff) from module top (D = $memory\DUT.Stack.rf$wrmux[5][2][0]$y$4806, Q = \DUT.Stack.rf[5] [7:0]).
Adding EN signal on $memory\DUT.Stack.rf[5]$4652 ($dff) from module top (D = $memory\DUT.Stack.rf$wrmux[5][2][8]$y$4810, Q = \DUT.Stack.rf[5] [13:8]).
Adding EN signal on $memory\DUT.Stack.rf[4]$4650 ($dff) from module top (D = $memory\DUT.Stack.rf$wrmux[4][2][8]$y$4792, Q = \DUT.Stack.rf[4] [13:8]).
Adding EN signal on $memory\DUT.Stack.rf[4]$4650 ($dff) from module top (D = $memory\DUT.Stack.rf$wrmux[4][2][0]$y$4788, Q = \DUT.Stack.rf[4] [7:0]).
Adding EN signal on $memory\DUT.Stack.rf[3]$4648 ($dff) from module top (D = $memory\DUT.Stack.rf$wrmux[3][2][0]$y$4764, Q = \DUT.Stack.rf[3] [7:0]).
Adding EN signal on $memory\DUT.Stack.rf[3]$4648 ($dff) from module top (D = $memory\DUT.Stack.rf$wrmux[3][2][8]$y$4768, Q = \DUT.Stack.rf[3] [13:8]).
Adding EN signal on $memory\DUT.Stack.rf[2]$4646 ($dff) from module top (D = $memory\DUT.Stack.rf$wrmux[2][2][0]$y$4746, Q = \DUT.Stack.rf[2] [7:0]).
Adding EN signal on $memory\DUT.Stack.rf[2]$4646 ($dff) from module top (D = $memory\DUT.Stack.rf$wrmux[2][2][8]$y$4750, Q = \DUT.Stack.rf[2] [13:8]).
Adding EN signal on $memory\DUT.Stack.rf[1]$4644 ($dff) from module top (D = $memory\DUT.Stack.rf$wrmux[1][2][8]$y$4728, Q = \DUT.Stack.rf[1] [13:8]).
Adding EN signal on $memory\DUT.Stack.rf[1]$4644 ($dff) from module top (D = $memory\DUT.Stack.rf$wrmux[1][2][0]$y$4724, Q = \DUT.Stack.rf[1] [7:0]).
Adding EN signal on $memory\DUT.Stack.rf[0]$4642 ($dff) from module top (D = $memory\DUT.Stack.rf$wrmux[0][2][0]$y$4704, Q = \DUT.Stack.rf[0] [7:0]).
Adding EN signal on $memory\DUT.Stack.rf[0]$4642 ($dff) from module top (D = $memory\DUT.Stack.rf$wrmux[0][2][8]$y$4708, Q = \DUT.Stack.rf[0] [13:8]).

3.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 8 unused wires.
<suppressed ~5 debug messages>

3.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.29.16. Rerunning OPT passes. (Maybe there is more to do..)

3.29.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~76 debug messages>

3.29.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $memory\DUT.Stack.rf$wrmux[0][0][0]$4683:
      Old ports: A=14'00000000000000, B=14'x, Y=$memory\DUT.Stack.rf$wrmux[0][0][0]$y$4684
      New ports: A=1'0, B=1'x, Y=$memory\DUT.Stack.rf$wrmux[0][0][0]$y$4684 [0]
      New connections: $memory\DUT.Stack.rf$wrmux[0][0][0]$y$4684 [13:1] = { $memory\DUT.Stack.rf$wrmux[0][0][0]$y$4684 [0] $memory\DUT.Stack.rf$wrmux[0][0][0]$y$4684 [0] $memory\DUT.Stack.rf$wrmux[0][0][0]$y$4684 [0] $memory\DUT.Stack.rf$wrmux[0][0][0]$y$4684 [0] $memory\DUT.Stack.rf$wrmux[0][0][0]$y$4684 [0] $memory\DUT.Stack.rf$wrmux[0][0][0]$y$4684 [0] $memory\DUT.Stack.rf$wrmux[0][0][0]$y$4684 [0] $memory\DUT.Stack.rf$wrmux[0][0][0]$y$4684 [0] $memory\DUT.Stack.rf$wrmux[0][0][0]$y$4684 [0] $memory\DUT.Stack.rf$wrmux[0][0][0]$y$4684 [0] $memory\DUT.Stack.rf$wrmux[0][0][0]$y$4684 [0] $memory\DUT.Stack.rf$wrmux[0][0][0]$y$4684 [0] $memory\DUT.Stack.rf$wrmux[0][0][0]$y$4684 [0] }
    Consolidated identical input bits for $mux cell $memory\DUT.Stack.rf$wrmux[1][0][0]$4711:
      Old ports: A=14'00000000000000, B=14'x, Y=$memory\DUT.Stack.rf$wrmux[1][0][0]$y$4712
      New ports: A=1'0, B=1'x, Y=$memory\DUT.Stack.rf$wrmux[1][0][0]$y$4712 [0]
      New connections: $memory\DUT.Stack.rf$wrmux[1][0][0]$y$4712 [13:1] = { $memory\DUT.Stack.rf$wrmux[1][0][0]$y$4712 [0] $memory\DUT.Stack.rf$wrmux[1][0][0]$y$4712 [0] $memory\DUT.Stack.rf$wrmux[1][0][0]$y$4712 [0] $memory\DUT.Stack.rf$wrmux[1][0][0]$y$4712 [0] $memory\DUT.Stack.rf$wrmux[1][0][0]$y$4712 [0] $memory\DUT.Stack.rf$wrmux[1][0][0]$y$4712 [0] $memory\DUT.Stack.rf$wrmux[1][0][0]$y$4712 [0] $memory\DUT.Stack.rf$wrmux[1][0][0]$y$4712 [0] $memory\DUT.Stack.rf$wrmux[1][0][0]$y$4712 [0] $memory\DUT.Stack.rf$wrmux[1][0][0]$y$4712 [0] $memory\DUT.Stack.rf$wrmux[1][0][0]$y$4712 [0] $memory\DUT.Stack.rf$wrmux[1][0][0]$y$4712 [0] $memory\DUT.Stack.rf$wrmux[1][0][0]$y$4712 [0] }
    Consolidated identical input bits for $mux cell $memory\DUT.Stack.rf$wrmux[2][0][0]$4731:
      Old ports: A=14'00000000000000, B=14'x, Y=$memory\DUT.Stack.rf$wrmux[2][0][0]$y$4732
      New ports: A=1'0, B=1'x, Y=$memory\DUT.Stack.rf$wrmux[2][0][0]$y$4732 [0]
      New connections: $memory\DUT.Stack.rf$wrmux[2][0][0]$y$4732 [13:1] = { $memory\DUT.Stack.rf$wrmux[2][0][0]$y$4732 [0] $memory\DUT.Stack.rf$wrmux[2][0][0]$y$4732 [0] $memory\DUT.Stack.rf$wrmux[2][0][0]$y$4732 [0] $memory\DUT.Stack.rf$wrmux[2][0][0]$y$4732 [0] $memory\DUT.Stack.rf$wrmux[2][0][0]$y$4732 [0] $memory\DUT.Stack.rf$wrmux[2][0][0]$y$4732 [0] $memory\DUT.Stack.rf$wrmux[2][0][0]$y$4732 [0] $memory\DUT.Stack.rf$wrmux[2][0][0]$y$4732 [0] $memory\DUT.Stack.rf$wrmux[2][0][0]$y$4732 [0] $memory\DUT.Stack.rf$wrmux[2][0][0]$y$4732 [0] $memory\DUT.Stack.rf$wrmux[2][0][0]$y$4732 [0] $memory\DUT.Stack.rf$wrmux[2][0][0]$y$4732 [0] $memory\DUT.Stack.rf$wrmux[2][0][0]$y$4732 [0] }
    Consolidated identical input bits for $mux cell $memory\DUT.Stack.rf$wrmux[3][0][0]$4753:
      Old ports: A=14'00000000000000, B=14'x, Y=$memory\DUT.Stack.rf$wrmux[3][0][0]$y$4754
      New ports: A=1'0, B=1'x, Y=$memory\DUT.Stack.rf$wrmux[3][0][0]$y$4754 [0]
      New connections: $memory\DUT.Stack.rf$wrmux[3][0][0]$y$4754 [13:1] = { $memory\DUT.Stack.rf$wrmux[3][0][0]$y$4754 [0] $memory\DUT.Stack.rf$wrmux[3][0][0]$y$4754 [0] $memory\DUT.Stack.rf$wrmux[3][0][0]$y$4754 [0] $memory\DUT.Stack.rf$wrmux[3][0][0]$y$4754 [0] $memory\DUT.Stack.rf$wrmux[3][0][0]$y$4754 [0] $memory\DUT.Stack.rf$wrmux[3][0][0]$y$4754 [0] $memory\DUT.Stack.rf$wrmux[3][0][0]$y$4754 [0] $memory\DUT.Stack.rf$wrmux[3][0][0]$y$4754 [0] $memory\DUT.Stack.rf$wrmux[3][0][0]$y$4754 [0] $memory\DUT.Stack.rf$wrmux[3][0][0]$y$4754 [0] $memory\DUT.Stack.rf$wrmux[3][0][0]$y$4754 [0] $memory\DUT.Stack.rf$wrmux[3][0][0]$y$4754 [0] $memory\DUT.Stack.rf$wrmux[3][0][0]$y$4754 [0] }
    Consolidated identical input bits for $mux cell $memory\DUT.Stack.rf$wrmux[4][0][0]$4771:
      Old ports: A=14'00000000000000, B=14'x, Y=$memory\DUT.Stack.rf$wrmux[4][0][0]$y$4772
      New ports: A=1'0, B=1'x, Y=$memory\DUT.Stack.rf$wrmux[4][0][0]$y$4772 [0]
      New connections: $memory\DUT.Stack.rf$wrmux[4][0][0]$y$4772 [13:1] = { $memory\DUT.Stack.rf$wrmux[4][0][0]$y$4772 [0] $memory\DUT.Stack.rf$wrmux[4][0][0]$y$4772 [0] $memory\DUT.Stack.rf$wrmux[4][0][0]$y$4772 [0] $memory\DUT.Stack.rf$wrmux[4][0][0]$y$4772 [0] $memory\DUT.Stack.rf$wrmux[4][0][0]$y$4772 [0] $memory\DUT.Stack.rf$wrmux[4][0][0]$y$4772 [0] $memory\DUT.Stack.rf$wrmux[4][0][0]$y$4772 [0] $memory\DUT.Stack.rf$wrmux[4][0][0]$y$4772 [0] $memory\DUT.Stack.rf$wrmux[4][0][0]$y$4772 [0] $memory\DUT.Stack.rf$wrmux[4][0][0]$y$4772 [0] $memory\DUT.Stack.rf$wrmux[4][0][0]$y$4772 [0] $memory\DUT.Stack.rf$wrmux[4][0][0]$y$4772 [0] $memory\DUT.Stack.rf$wrmux[4][0][0]$y$4772 [0] }
    Consolidated identical input bits for $mux cell $memory\DUT.Stack.rf$wrmux[5][1][0]$4799:
      Old ports: A=14'00000000000000, B=14'x, Y=$memory\DUT.Stack.rf$wrmux[5][1][0]$y$4800
      New ports: A=1'0, B=1'x, Y=$memory\DUT.Stack.rf$wrmux[5][1][0]$y$4800 [0]
      New connections: $memory\DUT.Stack.rf$wrmux[5][1][0]$y$4800 [13:1] = { $memory\DUT.Stack.rf$wrmux[5][1][0]$y$4800 [0] $memory\DUT.Stack.rf$wrmux[5][1][0]$y$4800 [0] $memory\DUT.Stack.rf$wrmux[5][1][0]$y$4800 [0] $memory\DUT.Stack.rf$wrmux[5][1][0]$y$4800 [0] $memory\DUT.Stack.rf$wrmux[5][1][0]$y$4800 [0] $memory\DUT.Stack.rf$wrmux[5][1][0]$y$4800 [0] $memory\DUT.Stack.rf$wrmux[5][1][0]$y$4800 [0] $memory\DUT.Stack.rf$wrmux[5][1][0]$y$4800 [0] $memory\DUT.Stack.rf$wrmux[5][1][0]$y$4800 [0] $memory\DUT.Stack.rf$wrmux[5][1][0]$y$4800 [0] $memory\DUT.Stack.rf$wrmux[5][1][0]$y$4800 [0] $memory\DUT.Stack.rf$wrmux[5][1][0]$y$4800 [0] $memory\DUT.Stack.rf$wrmux[5][1][0]$y$4800 [0] }
    Consolidated identical input bits for $mux cell $memory\DUT.Stack.rf$wrmux[6][1][0]$4817:
      Old ports: A=14'00000000000000, B=14'x, Y=$memory\DUT.Stack.rf$wrmux[6][1][0]$y$4818
      New ports: A=1'0, B=1'x, Y=$memory\DUT.Stack.rf$wrmux[6][1][0]$y$4818 [0]
      New connections: $memory\DUT.Stack.rf$wrmux[6][1][0]$y$4818 [13:1] = { $memory\DUT.Stack.rf$wrmux[6][1][0]$y$4818 [0] $memory\DUT.Stack.rf$wrmux[6][1][0]$y$4818 [0] $memory\DUT.Stack.rf$wrmux[6][1][0]$y$4818 [0] $memory\DUT.Stack.rf$wrmux[6][1][0]$y$4818 [0] $memory\DUT.Stack.rf$wrmux[6][1][0]$y$4818 [0] $memory\DUT.Stack.rf$wrmux[6][1][0]$y$4818 [0] $memory\DUT.Stack.rf$wrmux[6][1][0]$y$4818 [0] $memory\DUT.Stack.rf$wrmux[6][1][0]$y$4818 [0] $memory\DUT.Stack.rf$wrmux[6][1][0]$y$4818 [0] $memory\DUT.Stack.rf$wrmux[6][1][0]$y$4818 [0] $memory\DUT.Stack.rf$wrmux[6][1][0]$y$4818 [0] $memory\DUT.Stack.rf$wrmux[6][1][0]$y$4818 [0] $memory\DUT.Stack.rf$wrmux[6][1][0]$y$4818 [0] }
    Consolidated identical input bits for $mux cell $memory\DUT.Stack.rf$wrmux[7][1][0]$4837:
      Old ports: A=14'00000000000000, B=14'x, Y=$memory\DUT.Stack.rf$wrmux[7][1][0]$y$4838
      New ports: A=1'0, B=1'x, Y=$memory\DUT.Stack.rf$wrmux[7][1][0]$y$4838 [0]
      New connections: $memory\DUT.Stack.rf$wrmux[7][1][0]$y$4838 [13:1] = { $memory\DUT.Stack.rf$wrmux[7][1][0]$y$4838 [0] $memory\DUT.Stack.rf$wrmux[7][1][0]$y$4838 [0] $memory\DUT.Stack.rf$wrmux[7][1][0]$y$4838 [0] $memory\DUT.Stack.rf$wrmux[7][1][0]$y$4838 [0] $memory\DUT.Stack.rf$wrmux[7][1][0]$y$4838 [0] $memory\DUT.Stack.rf$wrmux[7][1][0]$y$4838 [0] $memory\DUT.Stack.rf$wrmux[7][1][0]$y$4838 [0] $memory\DUT.Stack.rf$wrmux[7][1][0]$y$4838 [0] $memory\DUT.Stack.rf$wrmux[7][1][0]$y$4838 [0] $memory\DUT.Stack.rf$wrmux[7][1][0]$y$4838 [0] $memory\DUT.Stack.rf$wrmux[7][1][0]$y$4838 [0] $memory\DUT.Stack.rf$wrmux[7][1][0]$y$4838 [0] $memory\DUT.Stack.rf$wrmux[7][1][0]$y$4838 [0] }
    Consolidated identical input bits for $mux cell $memory\DUT.rf.rf$wrmux[0][0][0]$4888:
      Old ports: A=8'00000000, B=8'x, Y=$memory\DUT.rf.rf$wrmux[0][0][0]$y$4889
      New ports: A=1'0, B=1'x, Y=$memory\DUT.rf.rf$wrmux[0][0][0]$y$4889 [0]
      New connections: $memory\DUT.rf.rf$wrmux[0][0][0]$y$4889 [7:1] = { $memory\DUT.rf.rf$wrmux[0][0][0]$y$4889 [0] $memory\DUT.rf.rf$wrmux[0][0][0]$y$4889 [0] $memory\DUT.rf.rf$wrmux[0][0][0]$y$4889 [0] $memory\DUT.rf.rf$wrmux[0][0][0]$y$4889 [0] $memory\DUT.rf.rf$wrmux[0][0][0]$y$4889 [0] $memory\DUT.rf.rf$wrmux[0][0][0]$y$4889 [0] $memory\DUT.rf.rf$wrmux[0][0][0]$y$4889 [0] }
    Consolidated identical input bits for $mux cell $memory\DUT.rf.rf$wrmux[1][0][0]$4916:
      Old ports: A=8'00000000, B=8'x, Y=$memory\DUT.rf.rf$wrmux[1][0][0]$y$4917
      New ports: A=1'0, B=1'x, Y=$memory\DUT.rf.rf$wrmux[1][0][0]$y$4917 [0]
      New connections: $memory\DUT.rf.rf$wrmux[1][0][0]$y$4917 [7:1] = { $memory\DUT.rf.rf$wrmux[1][0][0]$y$4917 [0] $memory\DUT.rf.rf$wrmux[1][0][0]$y$4917 [0] $memory\DUT.rf.rf$wrmux[1][0][0]$y$4917 [0] $memory\DUT.rf.rf$wrmux[1][0][0]$y$4917 [0] $memory\DUT.rf.rf$wrmux[1][0][0]$y$4917 [0] $memory\DUT.rf.rf$wrmux[1][0][0]$y$4917 [0] $memory\DUT.rf.rf$wrmux[1][0][0]$y$4917 [0] }
    Consolidated identical input bits for $mux cell $memory\DUT.rf.rf$wrmux[2][0][0]$4936:
      Old ports: A=8'00000000, B=8'x, Y=$memory\DUT.rf.rf$wrmux[2][0][0]$y$4937
      New ports: A=1'0, B=1'x, Y=$memory\DUT.rf.rf$wrmux[2][0][0]$y$4937 [0]
      New connections: $memory\DUT.rf.rf$wrmux[2][0][0]$y$4937 [7:1] = { $memory\DUT.rf.rf$wrmux[2][0][0]$y$4937 [0] $memory\DUT.rf.rf$wrmux[2][0][0]$y$4937 [0] $memory\DUT.rf.rf$wrmux[2][0][0]$y$4937 [0] $memory\DUT.rf.rf$wrmux[2][0][0]$y$4937 [0] $memory\DUT.rf.rf$wrmux[2][0][0]$y$4937 [0] $memory\DUT.rf.rf$wrmux[2][0][0]$y$4937 [0] $memory\DUT.rf.rf$wrmux[2][0][0]$y$4937 [0] }
    Consolidated identical input bits for $mux cell $memory\DUT.rf.rf$wrmux[3][0][0]$4958:
      Old ports: A=8'00000000, B=8'x, Y=$memory\DUT.rf.rf$wrmux[3][0][0]$y$4959
      New ports: A=1'0, B=1'x, Y=$memory\DUT.rf.rf$wrmux[3][0][0]$y$4959 [0]
      New connections: $memory\DUT.rf.rf$wrmux[3][0][0]$y$4959 [7:1] = { $memory\DUT.rf.rf$wrmux[3][0][0]$y$4959 [0] $memory\DUT.rf.rf$wrmux[3][0][0]$y$4959 [0] $memory\DUT.rf.rf$wrmux[3][0][0]$y$4959 [0] $memory\DUT.rf.rf$wrmux[3][0][0]$y$4959 [0] $memory\DUT.rf.rf$wrmux[3][0][0]$y$4959 [0] $memory\DUT.rf.rf$wrmux[3][0][0]$y$4959 [0] $memory\DUT.rf.rf$wrmux[3][0][0]$y$4959 [0] }
    Consolidated identical input bits for $mux cell $memory\DUT.rf.rf$wrmux[4][0][0]$4974:
      Old ports: A=8'00000000, B=8'x, Y=$memory\DUT.rf.rf$wrmux[4][0][0]$y$4975
      New ports: A=1'0, B=1'x, Y=$memory\DUT.rf.rf$wrmux[4][0][0]$y$4975 [0]
      New connections: $memory\DUT.rf.rf$wrmux[4][0][0]$y$4975 [7:1] = { $memory\DUT.rf.rf$wrmux[4][0][0]$y$4975 [0] $memory\DUT.rf.rf$wrmux[4][0][0]$y$4975 [0] $memory\DUT.rf.rf$wrmux[4][0][0]$y$4975 [0] $memory\DUT.rf.rf$wrmux[4][0][0]$y$4975 [0] $memory\DUT.rf.rf$wrmux[4][0][0]$y$4975 [0] $memory\DUT.rf.rf$wrmux[4][0][0]$y$4975 [0] $memory\DUT.rf.rf$wrmux[4][0][0]$y$4975 [0] }
  Optimizing cells in module \top.
Performed a total of 13 changes.

3.29.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

3.29.20. Executing OPT_DFF pass (perform DFF optimizations).

3.29.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 12 unused wires.
<suppressed ~1 debug messages>

3.29.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.29.23. Rerunning OPT passes. (Maybe there is more to do..)

3.29.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~69 debug messages>

3.29.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.29.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.29.27. Executing OPT_DFF pass (perform DFF optimizations).

3.29.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.29.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.29.30. Finished OPT passes. (There is nothing left to do.)

3.30. Executing ICE40_WRAPCARRY pass (wrap carries).

3.31. Executing TECHMAP pass (map to technology primitives).

3.31.1. Executing Verilog-2005 frontend: /Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/techmap.v
Parsing Verilog input from `/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.31.2. Executing Verilog-2005 frontend: /Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

3.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_80_ice40_alu for cells of type $alu.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$d629d85c8826a74239b9178d1930215a43b0ceb0\_90_pmux for cells of type $pmux.
Using template $paramod$32e7c4d6f92ff4337599ece53082d2e88a82a9f2\_90_pmux for cells of type $pmux.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$85df5dc01c7df96a7d8e5f1fdf76ce9ac452af63\_90_pmux for cells of type $pmux.
Using template $paramod$c2e415ef15bc3ccd2723772353a6b450d3d76206\_90_pmux for cells of type $pmux.
Using template $paramod$bf2533632d512eac76dd186c0da49367e29b8e98\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$a2af9b43308e3114c3b5dd3f4dc3329b2387395d\_80_ice40_alu for cells of type $alu.
Using template $paramod$b8c0a997bce700f23568a5ada79cc6781d1f5ca0\_80_ice40_alu for cells of type $alu.
Using template $paramod$713617589782cfade849bb573b5c36106c4b708f\_80_ice40_alu for cells of type $alu.
Using template $paramod$4ccbe221165818e15f326ddee3d1183c7924e12f\_80_ice40_alu for cells of type $alu.
Using template $paramod$53700bbee849b2010ad0b60a61ccd204a10e24ca\_80_ice40_alu for cells of type $alu.
Using template $paramod$19189243523493d505a4933d1bad417c570ea8a6\_80_ice40_alu for cells of type $alu.
Using template $paramod$6f67705c43e5e94c02b6ebb52209ce5aa5ade4c1\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $reduce_xor.
Using template $paramod$b3b6ac92d800c6f07aa48f510f923d86a674e5a7\_90_pmux for cells of type $pmux.
Using template $paramod$d7387fdb214042e5ef2d69a3f74948694b4bb65e\_90_pmux for cells of type $pmux.
Using template $paramod$645fe0cc96ae5edb83bff90cc2c78f4a20ca3e3c\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~1162 debug messages>

3.32. Executing OPT pass (performing simple optimizations).

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~761 debug messages>

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~1122 debug messages>
Removed a total of 374 cells.

3.32.3. Executing OPT_DFF pass (perform DFF optimizations).

3.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 50 unused cells and 1301 unused wires.
<suppressed ~51 debug messages>

3.32.5. Finished fast OPT passes.

3.33. Executing ICE40_OPT pass (performing simple optimizations).

3.33.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$4567.slice[0].carry: CO=\DUT.SP_SEL.Q [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$4570.slice[0].carry: CO=\DUT.SP_SEL.Q [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$4573.slice[0].carry: CO=\DUT.Stack.rs [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$4576.slice[0].carry: CO=\DUT.regA.Q [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$4576.slice[8].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$4579.slice[8].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$4585.slice[0].carry: CO=\DUT.regA.Q [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$4585.slice[8].carry: CO=$auto$alumacc.cc:485:replace_alu$4585.C [8]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$4588.slice[8].carry: CO=$auto$alumacc.cc:485:replace_alu$4588.C [8]

3.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

3.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.33.4. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$7354 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [7], Q = \DUT.Stack.rf[0] [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$7353 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [6], Q = \DUT.Stack.rf[0] [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$7352 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [5], Q = \DUT.Stack.rf[0] [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$7351 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [4], Q = \DUT.Stack.rf[0] [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$7350 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [3], Q = \DUT.Stack.rf[0] [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$7349 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [2], Q = \DUT.Stack.rf[0] [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$7348 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [1], Q = \DUT.Stack.rf[0] [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$7347 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [0], Q = \DUT.Stack.rf[0] [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$7258 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [5], Q = \DUT.Stack.rf[1] [13], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$7257 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [4], Q = \DUT.Stack.rf[1] [12], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$7256 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [3], Q = \DUT.Stack.rf[1] [11], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$7255 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [2], Q = \DUT.Stack.rf[1] [10], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$7254 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [1], Q = \DUT.Stack.rf[1] [9], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$7253 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [0], Q = \DUT.Stack.rf[1] [8], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$6443 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [7], Q = \DUT.Stack.rf[2] [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$6442 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [6], Q = \DUT.Stack.rf[2] [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$6441 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [5], Q = \DUT.Stack.rf[2] [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$6440 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [4], Q = \DUT.Stack.rf[2] [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$6439 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [3], Q = \DUT.Stack.rf[2] [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$6438 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [2], Q = \DUT.Stack.rf[2] [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$6437 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [1], Q = \DUT.Stack.rf[2] [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$6436 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [0], Q = \DUT.Stack.rf[2] [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5690 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [5], Q = \DUT.Stack.rf[7] [13], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5689 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [4], Q = \DUT.Stack.rf[7] [12], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5688 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [3], Q = \DUT.Stack.rf[7] [11], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5687 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [2], Q = \DUT.Stack.rf[7] [10], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5686 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [1], Q = \DUT.Stack.rf[7] [9], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5685 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [0], Q = \DUT.Stack.rf[7] [8], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5667 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [7], Q = \DUT.Stack.rf[6] [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5666 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [6], Q = \DUT.Stack.rf[6] [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5665 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [5], Q = \DUT.Stack.rf[6] [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5664 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [4], Q = \DUT.Stack.rf[6] [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5663 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [3], Q = \DUT.Stack.rf[6] [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5662 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [2], Q = \DUT.Stack.rf[6] [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5661 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [1], Q = \DUT.Stack.rf[6] [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5660 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [0], Q = \DUT.Stack.rf[6] [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5643 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [5], Q = \DUT.Stack.rf[5] [13], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5642 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [4], Q = \DUT.Stack.rf[5] [12], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5641 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [3], Q = \DUT.Stack.rf[5] [11], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5640 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [2], Q = \DUT.Stack.rf[5] [10], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5639 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [1], Q = \DUT.Stack.rf[5] [9], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5638 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [0], Q = \DUT.Stack.rf[5] [8], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5612 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [7], Q = \DUT.Stack.rf[4] [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5611 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [6], Q = \DUT.Stack.rf[4] [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5610 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [5], Q = \DUT.Stack.rf[4] [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5609 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [4], Q = \DUT.Stack.rf[4] [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5608 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [3], Q = \DUT.Stack.rf[4] [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5607 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [2], Q = \DUT.Stack.rf[4] [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5606 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [1], Q = \DUT.Stack.rf[4] [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5605 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [0], Q = \DUT.Stack.rf[4] [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5587 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [5], Q = \DUT.Stack.rf[3] [13], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5586 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [4], Q = \DUT.Stack.rf[3] [12], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5585 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [3], Q = \DUT.Stack.rf[3] [11], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5584 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [2], Q = \DUT.Stack.rf[3] [10], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5583 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [1], Q = \DUT.Stack.rf[3] [9], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5582 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [0], Q = \DUT.Stack.rf[3] [8], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5549 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [5], Q = \DUT.Stack.rf[2] [13], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5548 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [4], Q = \DUT.Stack.rf[2] [12], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5547 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [3], Q = \DUT.Stack.rf[2] [11], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5546 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [2], Q = \DUT.Stack.rf[2] [10], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5545 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [1], Q = \DUT.Stack.rf[2] [9], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5544 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [0], Q = \DUT.Stack.rf[2] [8], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5526 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [7], Q = \DUT.Stack.rf[1] [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5525 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [6], Q = \DUT.Stack.rf[1] [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5524 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [5], Q = \DUT.Stack.rf[1] [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5523 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [4], Q = \DUT.Stack.rf[1] [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5522 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [3], Q = \DUT.Stack.rf[1] [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5521 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [2], Q = \DUT.Stack.rf[1] [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5520 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [1], Q = \DUT.Stack.rf[1] [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5519 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [0], Q = \DUT.Stack.rf[1] [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5475 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [5], Q = \DUT.Stack.rf[0] [13], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5474 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [4], Q = \DUT.Stack.rf[0] [12], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5473 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [3], Q = \DUT.Stack.rf[0] [11], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5472 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [2], Q = \DUT.Stack.rf[0] [10], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5471 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [1], Q = \DUT.Stack.rf[0] [9], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5470 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [0], Q = \DUT.Stack.rf[0] [8], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5398 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [7], Q = \DUT.rf.rf[4] [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5397 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [6], Q = \DUT.rf.rf[4] [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5396 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [5], Q = \DUT.rf.rf[4] [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5395 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [4], Q = \DUT.rf.rf[4] [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5394 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [3], Q = \DUT.rf.rf[4] [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5393 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [2], Q = \DUT.rf.rf[4] [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5392 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [1], Q = \DUT.rf.rf[4] [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5391 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [0], Q = \DUT.rf.rf[4] [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5390 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [7], Q = \DUT.rf.rf[3] [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5389 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [6], Q = \DUT.rf.rf[3] [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5388 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [5], Q = \DUT.rf.rf[3] [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5387 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [4], Q = \DUT.rf.rf[3] [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5386 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [3], Q = \DUT.rf.rf[3] [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5385 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [2], Q = \DUT.rf.rf[3] [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5384 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [1], Q = \DUT.rf.rf[3] [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5383 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [0], Q = \DUT.rf.rf[3] [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5382 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [7], Q = \DUT.rf.rf[2] [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5381 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [6], Q = \DUT.rf.rf[2] [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5380 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [5], Q = \DUT.rf.rf[2] [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5379 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [4], Q = \DUT.rf.rf[2] [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5378 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [3], Q = \DUT.rf.rf[2] [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5377 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [2], Q = \DUT.rf.rf[2] [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5376 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [1], Q = \DUT.rf.rf[2] [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5375 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [0], Q = \DUT.rf.rf[2] [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5374 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [7], Q = \DUT.rf.rf[1] [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5373 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [6], Q = \DUT.rf.rf[1] [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5372 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [5], Q = \DUT.rf.rf[1] [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5371 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [4], Q = \DUT.rf.rf[1] [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5370 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [3], Q = \DUT.rf.rf[1] [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5369 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [2], Q = \DUT.rf.rf[1] [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5368 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [1], Q = \DUT.rf.rf[1] [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5367 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [0], Q = \DUT.rf.rf[1] [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5366 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [7], Q = \DUT.rf.rf[0] [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5365 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [6], Q = \DUT.rf.rf[0] [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5364 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [5], Q = \DUT.rf.rf[0] [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5363 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [4], Q = \DUT.rf.rf[0] [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5362 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [3], Q = \DUT.rf.rf[0] [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5361 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [2], Q = \DUT.rf.rf[0] [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5360 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [1], Q = \DUT.rf.rf[0] [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5359 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4619 [0], Q = \DUT.rf.rf[0] [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5358 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [7], Q = \DUT.Stack.rf[7] [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5357 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [6], Q = \DUT.Stack.rf[7] [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5356 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [5], Q = \DUT.Stack.rf[7] [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5355 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [4], Q = \DUT.Stack.rf[7] [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5354 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [3], Q = \DUT.Stack.rf[7] [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5353 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [2], Q = \DUT.Stack.rf[7] [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5352 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [1], Q = \DUT.Stack.rf[7] [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5351 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [0], Q = \DUT.Stack.rf[7] [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5297 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [5], Q = \DUT.Stack.rf[6] [13], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5296 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [4], Q = \DUT.Stack.rf[6] [12], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5295 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [3], Q = \DUT.Stack.rf[6] [11], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5294 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [2], Q = \DUT.Stack.rf[6] [10], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5293 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [1], Q = \DUT.Stack.rf[6] [9], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5292 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [0], Q = \DUT.Stack.rf[6] [8], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5282 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [7], Q = \DUT.Stack.rf[5] [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5281 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [6], Q = \DUT.Stack.rf[5] [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5280 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [5], Q = \DUT.Stack.rf[5] [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5279 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [4], Q = \DUT.Stack.rf[5] [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5278 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [3], Q = \DUT.Stack.rf[5] [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5277 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [2], Q = \DUT.Stack.rf[5] [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5276 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [1], Q = \DUT.Stack.rf[5] [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5275 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [0], Q = \DUT.Stack.rf[5] [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5271 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [5], Q = \DUT.Stack.rf[4] [13], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5270 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [4], Q = \DUT.Stack.rf[4] [12], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5269 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [3], Q = \DUT.Stack.rf[4] [11], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5268 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [2], Q = \DUT.Stack.rf[4] [10], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5267 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [1], Q = \DUT.Stack.rf[4] [9], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5266 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4611 [0], Q = \DUT.Stack.rf[4] [8], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5264 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [7], Q = \DUT.Stack.rf[3] [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5263 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [6], Q = \DUT.Stack.rf[3] [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5262 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [5], Q = \DUT.Stack.rf[3] [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5261 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [4], Q = \DUT.Stack.rf[3] [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5260 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [3], Q = \DUT.Stack.rf[3] [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5259 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [2], Q = \DUT.Stack.rf[3] [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5258 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [1], Q = \DUT.Stack.rf[3] [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5257 ($_DFFE_PP_) from module top (D = $auto$rtlil.cc:2496:Mux$4607 [0], Q = \DUT.Stack.rf[3] [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5202 ($_SDFF_PN0_) from module top (D = $flatten\DUT.\Brain.$procmux$3963.Y_B [2], Q = \DUT.Brain.state [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$5201 ($_SDFF_PN1_) from module top (D = $flatten\DUT.\Brain.$procmux$3963.Y_B [1], Q = \DUT.Brain.state [1], rval = 1'1).
Adding SRST signal on $auto$ff.cc:266:slice$5200 ($_SDFF_PN0_) from module top (D = $flatten\DUT.\Brain.$procmux$3963.Y_B [0], Q = \DUT.Brain.state [0], rval = 1'0).

3.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 155 unused cells and 30 unused wires.
<suppressed ~157 debug messages>

3.33.6. Rerunning OPT passes. (Removed registers in this run.)

3.33.7. Running ICE40 specific optimizations.

3.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

3.33.10. Executing OPT_DFF pass (perform DFF optimizations).

3.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.33.12. Rerunning OPT passes. (Removed registers in this run.)

3.33.13. Running ICE40 specific optimizations.

3.33.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.33.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.33.16. Executing OPT_DFF pass (perform DFF optimizations).

3.33.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.33.18. Finished OPT passes. (There is nothing left to do.)

3.34. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

3.35. Executing TECHMAP pass (map to technology primitives).

3.35.1. Executing Verilog-2005 frontend: /Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

3.35.2. Continuing TECHMAP pass.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_SDFF_PP1_ for cells of type $_SDFF_PP1_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~239 debug messages>

3.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$alumacc.cc:485:replace_alu$4567.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$4570.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$4573.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$4576.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$4576.slice[8].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$4579.slice[8].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$4585.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$4585.slice[8].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$4588.slice[8].carry ($lut).

3.38. Executing ICE40_OPT pass (performing simple optimizations).

3.38.1. Running ICE40 specific optimizations.

3.38.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~214 debug messages>

3.38.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~579 debug messages>
Removed a total of 193 cells.

3.38.4. Executing OPT_DFF pass (perform DFF optimizations).

3.38.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1478 unused wires.
<suppressed ~1 debug messages>

3.38.6. Rerunning OPT passes. (Removed registers in this run.)

3.38.7. Running ICE40 specific optimizations.

3.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

3.38.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.38.10. Executing OPT_DFF pass (perform DFF optimizations).

3.38.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.38.12. Rerunning OPT passes. (Removed registers in this run.)

3.38.13. Running ICE40 specific optimizations.

3.38.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.38.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.38.16. Executing OPT_DFF pass (perform DFF optimizations).

3.38.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.38.18. Finished OPT passes. (There is nothing left to do.)

3.39. Executing TECHMAP pass (map to technology primitives).

3.39.1. Executing Verilog-2005 frontend: /Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

3.39.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.40. Executing ABC pass (technology mapping using ABC).

3.40.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 1342 gates and 1641 wires to a netlist network with 297 inputs and 126 outputs.

3.40.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress <abc-temp-dir>/input.blif 
ABC: Total number of equiv classes                =     275.
ABC: Participating nodes from both networks       =     673.
ABC: Participating nodes from the first network   =     274. (  51.50 % of nodes)
ABC: Participating nodes from the second network  =     399. (  75.00 % of nodes)
ABC: Node pairs (any polarity)                    =     274. (  51.50 % of names can be moved)
ABC: Node pairs (same polarity)                   =     237. (  44.55 % of names can be moved)
ABC: Total runtime =     0.05 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

3.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      531
ABC RESULTS:        internal signals:     1218
ABC RESULTS:           input signals:      297
ABC RESULTS:          output signals:      126
Removing temp directory.

3.41. Executing ICE40_WRAPCARRY pass (wrap carries).

3.42. Executing TECHMAP pass (map to technology primitives).

3.42.1. Executing Verilog-2005 frontend: /Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

3.42.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 5 unused cells and 1019 unused wires.

3.43. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      596
  1-LUT               12
  2-LUT              105
  3-LUT              196
  4-LUT              283
  with \SB_CARRY    (#0)   60
  with \SB_CARRY    (#1)   57

Eliminating LUTs.
Number of LUTs:      596
  1-LUT               12
  2-LUT              105
  3-LUT              196
  4-LUT              283
  with \SB_CARRY    (#0)   60
  with \SB_CARRY    (#1)   57

Combining LUTs.
Number of LUTs:      592
  1-LUT               11
  2-LUT              102
  3-LUT              193
  4-LUT              286
  with \SB_CARRY    (#0)   60
  with \SB_CARRY    (#1)   57

Eliminated 0 LUTs.
Combined 4 LUTs.
<suppressed ~3776 debug messages>

3.44. Executing TECHMAP pass (map to technology primitives).

3.44.1. Executing Verilog-2005 frontend: /Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/Users/brendanwilhelm/Desktop/98-154/oss-cad-suite/libexec/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

3.44.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000000 for cells of type $lut.
Using template $paramod$a50be0e6fa3a01511bb234559cb74fb8bd3e2061\$lut for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod$9d707d218adbd63b6f9a0c79d7ee037306fb6296\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111110 for cells of type $lut.
Using template $paramod$e49f6e3576ef1a6d2f58c54414dbb786af8cc869\$lut for cells of type $lut.
Using template $paramod$973818279bc95792902f3c09371fd2407d04a2a5\$lut for cells of type $lut.
Using template $paramod$7a9d9396461df152f697894fa3b294ad1b285e08\$lut for cells of type $lut.
Using template $paramod$d6d3aaeac1b9aa2c4b652c48e0deb565040dda72\$lut for cells of type $lut.
Using template $paramod$ea0faad69a26c91786a25961ea149d0e0961eb1f\$lut for cells of type $lut.
Using template $paramod$a44bfc089ebe40b83c2c06bb965c500df992ecfb\$lut for cells of type $lut.
Using template $paramod$bdb7f9ed72fd4f5c7ad81c376f2d8a5c72a0098d\$lut for cells of type $lut.
Using template $paramod$59c595af41d4a5cce2d588c3a5f1342749ce7a77\$lut for cells of type $lut.
Using template $paramod$a54d8b8d2c90a828ee71c2d82e7e1612992a7ab8\$lut for cells of type $lut.
Using template $paramod$179512a187da069f3b79ef6612a41e494e7d54b6\$lut for cells of type $lut.
Using template $paramod$bba54c1ef87367812b4c15f4aed5ac70773df775\$lut for cells of type $lut.
Using template $paramod$608f40069c27841a5b3bdf03643a34bdc8974072\$lut for cells of type $lut.
Using template $paramod$11ec7271d8e6e5aeaace08c13e4c601f10e31038\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11010000 for cells of type $lut.
Using template $paramod$41326ad8644342a66dfb051d050f2b6fbf15015b\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01001111 for cells of type $lut.
Using template $paramod$1f4e1a00fa6d8ad588f4c010c78ccc04c3c650b4\$lut for cells of type $lut.
Using template $paramod$6d6beead1425af15cf78b27fd9b11b41b5d4bce8\$lut for cells of type $lut.
Using template $paramod$90edf8d4fe439b92725b09f66e94b5afc9f35376\$lut for cells of type $lut.
Using template $paramod$1bf62ab10e48d71d6497bccacf5c70420c470fe9\$lut for cells of type $lut.
Using template $paramod$b93d1ea7a612a32c185108f67a153d44ffb9aac2\$lut for cells of type $lut.
Using template $paramod$6b0849254d6c87461fb93e37cc18f089f61eb912\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01110000 for cells of type $lut.
Using template $paramod$4b2297966ddb718657b80566604f97685ffc0120\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10111111 for cells of type $lut.
Using template $paramod$4282def8dbd6df3d1248ad282c629bee684502c2\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod$4972722c284f07fee673f7cb99e6a36ce4a244f0\$lut for cells of type $lut.
Using template $paramod$5a621b016c894274d07edef48c49b401a15fd796\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10010000 for cells of type $lut.
Using template $paramod$81d8a60fd95b1a9f9ef71c12a774ae6988cb9fd5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001101 for cells of type $lut.
Using template $paramod$7fcc2f13195f27c397064377984d87a90c06749d\$lut for cells of type $lut.
Using template $paramod$d53578aacfd93124244778d88be0e90eb09c1b1b\$lut for cells of type $lut.
Using template $paramod$314fe9458b07176c4d2c8c59533027c4c55155b5\$lut for cells of type $lut.
Using template $paramod$b431bfd938e35871dd0b7668e1503c7e8b9d491c\$lut for cells of type $lut.
Using template $paramod$a670b08a47dd8a34f954c50cd06e9996d77e8467\$lut for cells of type $lut.
Using template $paramod$6e46ec5a196ba1a24b8e69ab094cadc07c13ac1f\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1110 for cells of type $lut.
Using template $paramod$e5759512db67494ff77fbdfc66dff4006376568f\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00011111 for cells of type $lut.
Using template $paramod$82b4a585d1edcb5c6e755dc9bd3392228a1c1304\$lut for cells of type $lut.
Using template $paramod$8b24407096beec47292ddeb1567a058197a320b9\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001011 for cells of type $lut.
Using template $paramod$baa939b0bd5b3e0c8760492528669bd58f640542\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10110000 for cells of type $lut.
Using template $paramod$272652f6c6fbe9a75eff76e45cc7e2788835518b\$lut for cells of type $lut.
Using template $paramod$246006d276d15b0766d6d890a33a28800bfa7295\$lut for cells of type $lut.
Using template $paramod$fccccf8bb2add7667329c686feec7546eb9a3ae3\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00110101 for cells of type $lut.
Using template $paramod$b297295e19b03521716155b85537bbe86d6a9ae6\$lut for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod$b4f85a6321a00b090afc4e21d68e7b99eb94d149\$lut for cells of type $lut.
Using template $paramod$f54c0ffd7b041ca43eac7710ab19c0666d826c22\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11001010 for cells of type $lut.
Using template $paramod$38f9bf4dd2329347b8471f0a98443dd323386889\$lut for cells of type $lut.
Using template $paramod$43779580bfffd5d5a9f321249a174febf1dac288\$lut for cells of type $lut.
Using template $paramod$b4f15f202f50520dbc381cd0880ac94f830f05a8\$lut for cells of type $lut.
Using template $paramod$cde3aa23c1efa60a470cf0f0281347d6ba585afa\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10101100 for cells of type $lut.
Using template $paramod$04b674496422df8889c01c3744b94097628ccfbc\$lut for cells of type $lut.
Using template $paramod$19451f719aa4a75f15cb977ed4212a1c1a1550e9\$lut for cells of type $lut.
Using template $paramod$161491d8314cab9d5d32db4aa31f31f4ef4f6dc6\$lut for cells of type $lut.
Using template $paramod$e053a22d78e6bd5ea33183ea69976f0db741be0e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00111010 for cells of type $lut.
Using template $paramod$b4d0f4738a5ce50c7f36c2aa2ecc09cfb874f2b6\$lut for cells of type $lut.
Using template $paramod$89add7395f09a7f1d31ba23a20843f5b8e155407\$lut for cells of type $lut.
Using template $paramod$df0b68f8e63b2deb6710e23abd8b8ff0796d4897\$lut for cells of type $lut.
Using template $paramod$f9b715fbf1040e81e900b2461c2390d17ed5e988\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0111 for cells of type $lut.
Using template $paramod$d35161d1d7976dcc02e7c7d51172431be85143b4\$lut for cells of type $lut.
Using template $paramod$bb4fff1cc3b827238aa40993cafede1c5beecbe3\$lut for cells of type $lut.
Using template $paramod$cc08dba3aac8677e797984bdf18a09dd37547dd3\$lut for cells of type $lut.
Using template $paramod$359fe4e746656bf9c72aecaff84fc7bdea9f55a5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111000 for cells of type $lut.
Using template $paramod$fc318a7df7fe07fd6e06d67fcbc358e9823ea389\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~1856 debug messages>
Removed 0 unused cells and 1365 unused wires.

3.45. Executing AUTONAME pass.
Renamed 18970 objects in module top (63 iterations).
<suppressed ~1202 debug messages>

3.46. Executing HIERARCHY pass (managing design hierarchy).

3.46.1. Analyzing design hierarchy..
Top module:  \top

3.46.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

3.47. Printing statistics.

=== top ===

   Number of wires:                445
   Number of wire bits:           1705
   Number of public wires:         445
   Number of public wire bits:    1705
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                869
     SB_CARRY                       60
     SB_DFF                         11
     SB_DFFE                        16
     SB_DFFESR                     183
     SB_DFFSR                        6
     SB_DFFSS                        1
     SB_LUT4                       592

3.48. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

3.49. Executing JSON backend.

Warnings: 22 unique messages, 22 total
End of script. Logfile hash: c278b5b5a3, CPU: user 4.64s system 0.14s
Yosys 0.25+97 (git sha1 221036c5b, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 28% 14x read_verilog (1 sec), 15% 26x opt_expr (0 sec), ...
